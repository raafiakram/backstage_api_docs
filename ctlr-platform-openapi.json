{
    "openapi": "3.0.0",
    "info":{
        "title": "NGINX Controller Platform REST API",
        "version": "v1",
        "description": "Manage the NGINX Controller platform."
    },
    "tags": [

        {
            "name": "Authentication Providers",
            "description": "Use the Authentication Providers API to create, update, or remove authentication providers."
        },
        {
            "name": "Login Providers",
            "description": "Use the Login Providers API to retrieve a list of the available authentication providers."
        },
        {
            "name": "Login",
            "description": "Use the Login API to retrieve an authentication cookie. Include the session ID that's in the authentication cookie in the request header for all subsequent requests."
        },
        {
            "name": "Reset Password",
            "description": "Use the Reset Password API to manage NGINX Controller password recovery."
        },
        {
            "name": "Verify Authorization",
            "description": "Verifies the current session is authorized to access a list of resources."
        },
        {
            "name": "Nodes",
            "description": "Use the Nodes API to manage NGINX Controller control plane nodes."
        },
        {
            "name": "Global Settings",
            "description": "Use the Global Settings API to manage the system-wide configurations for NGINX Controller and Controller Agent."
        },
        {
            "name": "Global Features",
            "description": "Use the Features API to manage NGINX Controller features."
        },
        {
            "name": "License",
            "description": "Use the License API to manage the license(s) for NGINX Controller."
        },
        {
            "name": "Integrations",
            "description": "Use the Integrations API to manage integrated cloud provider or data collector accounts."
        },
        {
            "name": "Users",
            "description": "Use the Users API to manage NGINX Controller User accounts."
        },
        {
            "name": "Roles",
            "description": "Use the Roles API to manage NGINX Controller User Roles."
        },
        {
            "name": "Groups",
            "description": "Use the Groups API to manage NGINX Controller authentication groups."
        }
    ],
    "servers": [
        {
            "description": "NGINX Controller API",
            "url": "https://{{CONTROLLER_FQDN}}/api/v1"
    }],
    "paths": {
        "/platform/auth/password-recovery": {
            "post": {
                "tags": [
                    "Password"
                ],
                "summary": "Request password reset",
                "description": "Creates a password recovery code for user with given email and sends an email with reset link. The reset link is valid for an hour.",
                "operationId": "requestResetPassword",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequest"
                            },
                            "example": {
                                "metadata": {
                                    "name": "user@nginx.com"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successfully created the password recovery code. No content was returned."
                    }
                }
            }
        },
        "/platform/auth/password-recovery/{code}": {
            "put": {
                "tags": [
                    "Password"
                ],
                "summary": "Password reset",
                "description": "Check if the new password satisfies the policy constraints and update the password for the user associated with the recovery code.",
                "operationId": "resetPassword",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/code"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPassword"
                            },
                            "example": {
                                "desiredState": {
                                    "password": "NewPaw12!"
                                },
                                "metadata": {
                                    "name": "user@nginx.com"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successfully updated the password for the user. No content was returned."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/auth/providers": {
            "post": {
                "tags": [
                    "Authentication Providers"
                ],
                "summary": "Create an Authentication Provider",
                "description": "Creates a new authentication provider.\n",
                "operationId": "configureAuthProvider",
                "requestBody": {
                    "description": "Contains the configuration for a supported authentication provider.\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthProvider"
                            },
                            "example": {
                                "desiredState": {
                                    "provider": {
                                        "type": "ACTIVE_DIRECTORY",
                                        "domain": "DC=mydomain,DC=example,DC=com",
                                        "defaultLoginDomain": "mydomain",
                                        "connection": [
                                            {
                                                "uri": "ldaps://dc1.mydomain.com",
                                                "sslMode": "VERIFY_CA",
                                                "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                            }
                                        ],
                                        "groupSearchFilter": "(objectClass=group)",
                                        "groupMemberAttribute": "memberof",
                                        "userFormat": "UPN",
                                        "bindUser": {
                                            "type": "PASSWORD",
                                            "username": "user@mydomain",
                                            "password": "passwd1234"
                                        },
                                        "pollIntervalSec": 3600,
                                        "groupCacheTimeSec": 7200,
                                        "honorStaleGroups": false,
                                        "groupMappings": [
                                            {
                                                "external": "Engineering-US-West",
                                                "caseSensitive": true,
                                                "internal": {
                                                    "ref": "/platform/auth/groups/eng-west"
                                                }
                                            },
                                            {
                                                "external": "Engineering-US-East",
                                                "caseSensitive": true,
                                                "internal": {
                                                    "ref": "/platform/auth/groups/eng-east"
                                                }
                                            }
                                        ]
                                    }
                                },
                                "metadata": {
                                    "kind": "auth-provider",
                                    "name": "ad-dc-1",
                                    "tags": [
                                        "dev",
                                        "us-1"
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created the authentication provider.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthProvider"
                                },
                                "example": {
                                    "currentStatus": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "status": "CONNECTED_BOUND",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-west",
                                                            "name": "eng-west",
                                                            "displayName": "West engineering"
                                                        }
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-east",
                                                            "name": "eng-east",
                                                            "displayName": "East engineering"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "desiredState": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west"
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "auth-provider",
                                        "name": "ad-dc-1",
                                        "tags": [
                                            "dev",
                                            "us-1"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "get": {
                "tags": [
                    "Authentication Providers"
                ],
                "summary": "List all Authentication Providers",
                "description": "Returns a list of all authentication providers.\n",
                "operationId": "listAuthProviders",
                "responses": {
                    "200": {
                        "description": "Successfully returned a list of authentication providers.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAuthProviders"
                                },
                                "example": {
                                    "items": [
                                        {
                                            "currentStatus": {
                                                "provider": {
                                                    "type": "ACTIVE_DIRECTORY",
                                                    "status": "CONNECTED_BOUND",
                                                    "domain": "DC=mydomain,DC=example,DC=com",
                                                    "defaultLoginDomain": "mydomain",
                                                    "connection": [
                                                        {
                                                            "uri": "ldap://dc1.mydomain.com",
                                                            "sslMode": "REQUIRE",
                                                            "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                        }
                                                    ],
                                                    "groupSearchFilter": "(objectClass=group)",
                                                    "groupMemberAttribute": "memberof",
                                                    "userFormat": "UPN",
                                                    "bindUser": {
                                                        "type": "PASSWORD",
                                                        "username": "user@mydomain",
                                                        "password": "********"
                                                    },
                                                    "filteredGroups": [
                                                        "CN=Office_Admins_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                        "CN=RM_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                        "CN=Sales_Warsaw,OU=Warsaw,OU=Europe,OU=Acme Financial",
                                                        "CN=ACC_EU,OU=Europe,OU=Acme Financial"
                                                    ],
                                                    "pollIntervalSec": 3600,
                                                    "groupCacheTimeSec": 7200,
                                                    "honorStaleGroups": false,
                                                    "groupMappings": [
                                                        {
                                                            "external": "Engineering-US-West",
                                                            "caseSensitive": true,
                                                            "internal": {
                                                                "ref": "/platform/auth/groups/eng-west",
                                                                "links": {
                                                                    "rel": "/api/v1/platform/auth/groups/eng-west",
                                                                    "name": "eng-west",
                                                                    "displayName": "West engineering"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "external": "Engineering-US-East",
                                                            "caseSensitive": true,
                                                            "internal": {
                                                                "ref": "/platform/auth/groups/eng-east",
                                                                "links": {
                                                                    "rel": "/api/v1/platform/auth/groups/eng-east",
                                                                    "name": "eng-east",
                                                                    "displayName": "East engineering"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            "desiredState": {
                                                "provider": {
                                                    "type": "ACTIVE_DIRECTORY",
                                                    "domain": "DC=mydomain,DC=example,DC=com",
                                                    "defaultLoginDomain": "mydomain",
                                                    "connection": [
                                                        {
                                                            "uri": "ldap://dc1.mydomain.com",
                                                            "sslMode": "REQUIRE",
                                                            "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                        }
                                                    ],
                                                    "groupSearchFilter": "(objectClass=group)",
                                                    "groupMemberAttribute": "memberof",
                                                    "userFormat": "UPN",
                                                    "bindUser": {
                                                        "type": "PASSWORD",
                                                        "username": "user@mydomain",
                                                        "password": "********"
                                                    },
                                                    "filteredGroups": [
                                                        "CN=Office_Admins_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                        "CN=RM_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                        "CN=Sales_Warsaw,OU=Warsaw,OU=Europe,OU=Acme Financial",
                                                        "CN=ACC_EU,OU=Europe,OU=Acme Financial"
                                                    ],
                                                    "pollIntervalSec": 3600,
                                                    "groupCacheTimeSec": 7200,
                                                    "honorStaleGroups": false,
                                                    "groupMappings": [
                                                        {
                                                            "external": "Engineering-US-West",
                                                            "caseSensitive": true,
                                                            "internal": {
                                                                "ref": "/platform/auth/groups/eng-west"
                                                            }
                                                        },
                                                        {
                                                            "external": "Engineering-US-East",
                                                            "caseSensitive": true,
                                                            "internal": {
                                                                "ref": "/platform/auth/groups/eng-east"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            "metadata": {
                                                "createTime": "2020-02-24T22:55:51.729272Z",
                                                "kind": "auth-provider",
                                                "name": "ad-dc-1",
                                                "tags": [
                                                    "dev",
                                                    "us-1"
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/auth/providers/{providerName}": {
            "get": {
                "tags": [
                    "Authentication Providers"
                ],
                "summary": "Get an Authentication Provider",
                "description": "Returns information about the specified authentication provider.",
                "parameters": [
                    {
                        "name": "providerName",
                        "in": "path",
                        "description": "The name of the authentication provider.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "getProvider",
                "responses": {
                    "200": {
                        "description": "Successfully returned the requested authentication provider.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthProvider"
                                },
                                "example": {
                                    "currentStatus": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "status": "CONNECTED_BOUND",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "filteredGroups": [
                                                "CN=Office_Admins_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                "CN=RM_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                "CN=Sales_Warsaw,OU=Warsaw,OU=Europe,OU=Acme Financial",
                                                "CN=ACC_EU,OU=Europe,OU=Acme Financial"
                                            ],
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-west",
                                                            "name": "eng-west",
                                                            "displayName": "West engineering"
                                                        }
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-east",
                                                            "name": "eng-east",
                                                            "displayName": "East engineering"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "desiredState": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "filteredGroups": [
                                                "CN=Office_Admins_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                "CN=RM_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                                "CN=Sales_Warsaw,OU=Warsaw,OU=Europe,OU=Acme Financial",
                                                "CN=ACC_EU,OU=Europe,OU=Acme Financial"
                                            ],
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west"
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "auth-provider",
                                        "name": "ad-dc-1",
                                        "tags": [
                                            "dev",
                                            "us-1"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Authentication Providers"
                ],
                "summary": "Update an Authentication Provider",
                "description": "Updates the configuration for an existing authentication provider.\n\n> **Note:** You can use PATCH to update one or more specific configurations. Any settings not specified in the request will not be changed.\n",
                "parameters": [
                    {
                        "name": "providerName",
                        "in": "path",
                        "description": "The name of the authentication provider.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Contains the desired configuration changes for an authentication provider.\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthProvider"
                            },
                            "example": {
                                "desiredState": {
                                    "provider": {
                                        "type": "ACTIVE_DIRECTORY",
                                        "domain": "DC=mydomain,DC=example,DC=com",
                                        "defaultLoginDomain": "mydomain",
                                        "connection": [
                                            {
                                                "uri": "ldap://dc1.mydomain.com",
                                                "sslMode": "REQUIRE",
                                                "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                            }
                                        ],
                                        "groupSearchFilter": "(objectClass=group)",
                                        "groupMemberAttribute": "memberof",
                                        "userFormat": "UPN",
                                        "bindUser": {
                                            "type": "PASSWORD",
                                            "username": "user@mydomain",
                                            "password": "passwd1234"
                                        },
                                        "pollIntervalSec": 3600,
                                        "groupCacheTimeSec": 7200,
                                        "honorStaleGroups": false,
                                        "groupMappings": [
                                            {
                                                "external": "Engineering-US-West",
                                                "caseSensitive": true,
                                                "internal": {
                                                    "ref": "/platform/auth/groups/eng-west"
                                                }
                                            },
                                            {
                                                "external": "Engineering-US-East",
                                                "caseSensitive": true,
                                                "internal": {
                                                    "ref": "/platform/auth/groups/eng-east"
                                                }
                                            }
                                        ]
                                    }
                                },
                                "metadata": {
                                    "kind": "auth-provider",
                                    "name": "ad-dc-1",
                                    "tags": [
                                        "dev",
                                        "us-1"
                                    ]
                                }
                            }
                        }
                    }
                },
                "operationId": "partialUpdateProvider",
                "responses": {
                    "200": {
                        "description": "Successfully updated the configuration for the authentication provider.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthProvider"
                                },
                                "example": {
                                    "currentStatus": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "status": "CONNECTED_BOUND",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-west",
                                                            "name": "eng-west",
                                                            "displayName": "West engineering"
                                                        }
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-east",
                                                            "name": "eng-east",
                                                            "displayName": "East engineering"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "desiredState": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west"
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "auth-provider",
                                        "name": "ad-dc-1",
                                        "tags": [
                                            "dev",
                                            "us-1"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "put": {
                "tags": [
                    "Authentication Providers"
                ],
                "summary": "Update an Authentication Provider",
                "description": "Updates all of the configurations for an existing authentication provider.\n",
                "parameters": [
                    {
                        "name": "providerName",
                        "in": "path",
                        "description": "The name of the authentication provider.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Contains the desired configuration for the authentication provider.\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthProvider"
                            },
                            "example": {
                                "desiredState": {
                                    "provider": {
                                        "type": "ACTIVE_DIRECTORY",
                                        "domain": "DC=mydomain,DC=example,DC=com",
                                        "defaultLoginDomain": "mydomain",
                                        "connection": [
                                            {
                                                "uri": "ldap://dc1.mydomain.com",
                                                "sslMode": "REQUIRE",
                                                "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                            }
                                        ],
                                        "groupSearchFilter": "(objectClass=group)",
                                        "groupMemberAttribute": "memberof",
                                        "userFormat": "UPN",
                                        "bindUser": {
                                            "type": "PASSWORD",
                                            "username": "user@mydomain",
                                            "password": "passwd1234"
                                        },
                                        "pollIntervalSec": 3600,
                                        "groupCacheTimeSec": 7200,
                                        "honorStaleGroups": false,
                                        "groupMappings": [
                                            {
                                                "external": "Engineering-US-West",
                                                "caseSensitive": true,
                                                "internal": {
                                                    "ref": "/platform/auth/groups/eng-west"
                                                }
                                            },
                                            {
                                                "external": "Engineering-US-East",
                                                "caseSensitive": true,
                                                "internal": {
                                                    "ref": "/platform/auth/groups/eng-east"
                                                }
                                            }
                                        ]
                                    }
                                },
                                "metadata": {
                                    "kind": "auth-provider",
                                    "name": "ad-dc-1",
                                    "tags": [
                                        "dev",
                                        "us-1"
                                    ]
                                }
                            }
                        }
                    }
                },
                "operationId": "updateProvider",
                "responses": {
                    "200": {
                        "description": "Successfully updated the configuration for the authentication provider.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthProvider"
                                },
                                "example": {
                                    "currentStatus": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "status": "CONNECTED_BOUND",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-west",
                                                            "name": "eng-west",
                                                            "displayName": "West engineering"
                                                        }
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-east",
                                                            "name": "eng-east",
                                                            "displayName": "East engineering"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "desiredState": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "********"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west"
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "auth-provider",
                                        "name": "ad-dc-1",
                                        "tags": [
                                            "dev",
                                            "us-1"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created the configuration for the provider.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthProvider"
                                },
                                "example": {
                                    "currentStatus": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "status": "CONNECTED_BOUND",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "********"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "*******"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-west",
                                                            "name": "eng-west",
                                                            "displayName": "West engineering"
                                                        }
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east",
                                                        "links": {
                                                            "rel": "/api/v1/platform/auth/groups/eng-east",
                                                            "name": "eng-east",
                                                            "displayName": "East engineering"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "desiredState": {
                                        "provider": {
                                            "type": "ACTIVE_DIRECTORY",
                                            "domain": "DC=mydomain,DC=example,DC=com",
                                            "defaultLoginDomain": "mydomain",
                                            "connection": [
                                                {
                                                    "uri": "ldap://dc1.mydomain.com",
                                                    "sslMode": "REQUIRE",
                                                    "rawCa": "********"
                                                }
                                            ],
                                            "groupSearchFilter": "(objectClass=group)",
                                            "groupMemberAttribute": "memberof",
                                            "userFormat": "UPN",
                                            "bindUser": {
                                                "type": "PASSWORD",
                                                "username": "user@mydomain",
                                                "password": "*******"
                                            },
                                            "pollIntervalSec": 3600,
                                            "groupCacheTimeSec": 7200,
                                            "honorStaleGroups": false,
                                            "groupMappings": [
                                                {
                                                    "external": "Engineering-US-West",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-west"
                                                    }
                                                },
                                                {
                                                    "external": "Engineering-US-East",
                                                    "caseSensitive": true,
                                                    "internal": {
                                                        "ref": "/platform/auth/groups/eng-east"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "auth-provider",
                                        "name": "ad-dc-1",
                                        "tags": [
                                            "dev",
                                            "us-1"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Authentication Providers"
                ],
                "summary": "Delete an Authentication Provider",
                "description": "Deletes the authentication provider.",
                "parameters": [
                    {
                        "name": "providerName",
                        "in": "path",
                        "description": "The name of the authentication provider.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "disable",
                "responses": {
                    "204": {
                        "description": "Successfully deleted the authentication provider."
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/auth/verify": {
            "x-f5-experimental": true,
            "post": {
                "x-f5-experimental": true,
                "tags": [
                    "Verify Auth Permissions"
                ],
                "summary": "Request a collection of permitted actions",
                "description": "Returns a list of authorized actions based on a list of requested actions and resources.\n",
                "operationId": "doVerify",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyList"
                            },
                            "example": {
                                "items": [
                                    {
                                        "path": "/services/environments/test1",
                                        "method": "DELETE"
                                    },
                                    {
                                        "path": "/services/environments/test2",
                                        "method": "PUT"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of authorized actions.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerifyList"
                                },
                                "example": {
                                    "items": [
                                        {
                                            "path": "/services/environments/test1",
                                            "method": "DELETE",
                                            "permitted": false
                                        },
                                        {
                                            "path": "/services/environments/test2",
                                            "method": "PUT",
                                            "permitted": true
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/global": {
            "get": {
                "tags": [
                    "Global Settings"
                ],
                "summary": "Get the Global Settings",
                "operationId": "getGlobalSettings",
                "description": "Gets information about the global settings for NGINX Controller.",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the global settings for NGINX Controller.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalSettings"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "put": {
                "tags": [
                    "Global Settings"
                ],
                "operationId": "putGlobalSettings",
                "description": "Updates the global settings used by NGINX Controller.",
                "summary": "Update the Global Settings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlobalSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the global settings for NGINX Controller.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalSettings"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Global Settings"
                ],
                "operationId": "patchGlobalSettings",
                "description": "Updates the global settings for NGINX Controller.",
                "summary": "Update part of the Global Settings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlobalSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the global settings for NGINX Controller.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalSettings"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/global/features": {
            "x-f5-experimental": true,
            "get": {
                "x-f5-experimental": true,
                "tags": [
                    "Global Features"
                ],
                "summary": "Get the Global Features",
                "operationId": "getGlobalFeatures",
                "description": "Gets information about the global features for NGINX Controller.",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the global features for NGINX Controller.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalFeatures"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/license": {
            "get": {
                "tags": [
                    "License"
                ],
                "summary": "Get a License",
                "description": "Gets information for the active NGINX Controller license.",
                "operationId": "getLicense",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the active Controller license.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseResponse"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "license"
                                    },
                                    "desiredState": {
                                        "content": "******",
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "subscription": {
                                            "id": "b6d7c577-b708-44ad-839c-9743f85fcf7c"
                                        },
                                        "entitlement": {
                                            "features": [
                                                {
                                                    "name": "NGINX Controller Load Balancing",
                                                    "limit": 20,
                                                    "unitOfMeasure": "WORKLOADS",
                                                    "type": "PAID",
                                                    "id": "ADC",
                                                    "expiry": "1996-02-26T00:00:00.000Z",
                                                    "gracePeriodDays": 30
                                                }
                                            ]
                                        },
                                        "state": {
                                            "currentInstance": {
                                                "id": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                                                "type": "NGINX Controller",
                                                "status": "INVALID",
                                                "version": "3.3.0",
                                                "telemetryLastReported": "2021-05-10T00:00:00Z",
                                                "features": [
                                                    {
                                                        "name": "NGINX Controller Load Balancing",
                                                        "used": 5,
                                                        "aggregateUsed": 10,
                                                        "remaining": 5,
                                                        "unitOfMeasure": "WORKLOADS",
                                                        "id": "ADC",
                                                        "daysUntilExpiry": 20,
                                                        "gracePeriodRemainingDays": 30
                                                    }
                                                ],
                                                "configState": {
                                                    "selfConfigState": {
                                                        "isConfigured": true,
                                                        "isConfiguring": false,
                                                        "isError": false,
                                                        "isDeleting": false
                                                    },
                                                    "conditions": []
                                                }
                                            }
                                        },
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "put": {
                "tags": [
                    "License"
                ],
                "summary": "Upload a License",
                "description": "Uploads an NGINX Controller license.\n\nProvide your NGINX Controller license in the JSON request body as a base64-encoded string or as an unencoded customer association token.\n",
                "operationId": "putLicense",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutLicenseRequest"
                            },
                            "example": {
                                "metadata": {
                                    "name": "license"
                                },
                                "desiredState": {
                                    "content": "<base-64-encoded-license-file-contents or association-token>"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully uploaded the license.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseResponse"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "license"
                                    },
                                    "desiredState": {
                                        "content": "******",
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "subscription": {
                                            "id": "b6d7c577-b708-44ad-839c-9743f85fcf7c"
                                        },
                                        "entitlement": {
                                            "features": [
                                                {
                                                    "name": "NGINX Controller Load Balancing",
                                                    "limit": 20,
                                                    "unitOfMeasure": "WORKLOADS",
                                                    "type": "PAID",
                                                    "id": "ADC",
                                                    "expiry": "2021-02-26T00:00:00.000Z",
                                                    "gracePeriodDays": 30
                                                }
                                            ]
                                        },
                                        "state": {
                                            "currentInstance": {
                                                "id": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                                                "type": "NGINX Controller",
                                                "status": "INVALID",
                                                "version": "3.3.0",
                                                "telemetryLastReported": "2021-05-10T00:00:00Z",
                                                "features": [
                                                    {
                                                        "name": "NGINX Controller Load Balancing",
                                                        "used": 5,
                                                        "aggregateUsed": 10,
                                                        "remaining": 5,
                                                        "unitOfMeasure": "WORKLOADS",
                                                        "id": "ADC",
                                                        "daysUntilExpiry": 20,
                                                        "gracePeriodRemainingDays": 0
                                                    }
                                                ],
                                                "configState": {
                                                    "selfConfigState": {
                                                        "isConfigured": true,
                                                        "isConfiguring": false,
                                                        "isError": false,
                                                        "isDeleting": false
                                                    },
                                                    "conditions": []
                                                }
                                            }
                                        },
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The request to upload a license succeeded. The License resource will be created when the upload is complete.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseResponse"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "license"
                                    },
                                    "desiredState": {
                                        "content": "******",
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "subscription": {
                                            "id": "b6d7c577-b708-44ad-839c-9743f85fcf7c"
                                        },
                                        "entitlement": {
                                            "features": [
                                                {
                                                    "name": "NGINX Controller Load Balancing",
                                                    "limit": 20,
                                                    "unitOfMeasure": "WORKLOADS",
                                                    "type": "PAID",
                                                    "id": "ADC",
                                                    "expiry": "2021-02-26T00:00:00.000Z",
                                                    "gracePeriodDays": 30
                                                }
                                            ]
                                        },
                                        "state": {
                                            "currentInstance": {
                                                "id": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                                                "type": "NGINX Controller",
                                                "status": "INVALID",
                                                "version": "3.3.0",
                                                "telemetryLastReported": "2021-05-10T00:00:00Z",
                                                "features": [
                                                    {
                                                        "name": "NGINX Controller Load Balancing",
                                                        "used": 5,
                                                        "aggregateUsed": 10,
                                                        "remaining": 5,
                                                        "unitOfMeasure": "WORKLOADS",
                                                        "id": "ADC",
                                                        "daysUntilExpiry": 20,
                                                        "gracePeriodRemainingDays": 0
                                                    }
                                                ],
                                                "configState": {
                                                    "selfConfigState": {
                                                        "isConfigured": false,
                                                        "isConfiguring": true,
                                                        "isError": false,
                                                        "isDeleting": false
                                                    },
                                                    "conditions": []
                                                }
                                            }
                                        },
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "delete": {
                "tags": [
                    "License"
                ],
                "operationId": "deleteLicense",
                "summary": "Delete a License",
                "description": "Deletes an NGINX Controller License resource.",
                "responses": {
                    "202": {
                        "description": "Successfully scheduled the request to delete the license.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseResponse"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "license"
                                    },
                                    "desiredState": {
                                        "content": "******",
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "subscription": {
                                            "id": "b6d7c577-b708-44ad-839c-9743f85fcf7c"
                                        },
                                        "entitlement": {
                                            "features": [
                                                {
                                                    "name": "NGINX Controller Load Balancing",
                                                    "limit": 20,
                                                    "unitOfMeasure": "WORKLOADS",
                                                    "type": "PAID",
                                                    "id": "ADC",
                                                    "expiry": "2021-02-26T00:00:00.000Z",
                                                    "gracePeriodDays": 30
                                                }
                                            ]
                                        },
                                        "state": {
                                            "currentInstance": {
                                                "id": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                                                "type": "NGINX Controller",
                                                "status": "INVALID",
                                                "version": "3.3.0",
                                                "telemetryLastReported": "2021-05-10T00:00:00Z",
                                                "features": [
                                                    {
                                                        "name": "NGINX Controller Load Balancing",
                                                        "used": 5,
                                                        "aggregateUsed": 10,
                                                        "remaining": 5,
                                                        "unitOfMeasure": "WORKLOADS",
                                                        "id": "ADC",
                                                        "daysUntilExpiry": 20,
                                                        "gracePeriodRemainingDays": 0
                                                    }
                                                ],
                                                "configState": {
                                                    "selfConfigState": {
                                                        "isConfigured": false,
                                                        "isConfiguring": false,
                                                        "isError": false,
                                                        "isDeleting": true
                                                    },
                                                    "conditions": []
                                                }
                                            }
                                        },
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 250,
                                                "product": "NGINX Controller Load Balancing",
                                                "serial": 20145,
                                                "type": "PAID",
                                                "version": 1,
                                                "id": "ADC"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/licenses/nginx-plus-licenses": {
            "get": {
                "tags": [
                    "License"
                ],
                "summary": "List all NGINX+ Licenses.",
                "description": "Returns a list of all NGINX Plus licenses.",
                "operationId": "listNginxPlusLicenses",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of NGINX Plus licenses.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NginxPlusLicensesList"
                                },
                                "example": {
                                    "items": [
                                        {
                                            "metadata": {
                                                "name": "controller-provided",
                                                "ref": "/platform/licenses/nginx-plus-licenses/controller-provided",
                                                "kind": "license"
                                            },
                                            "currenStatus": {
                                                "certKey": "a valid certificate key for NGINX Plus",
                                                "privateKey": "a valid private key for NGINX Plus"
                                            },
                                            "desiredState": {
                                                "certKey": "a valid certificate key for NGINX Plus",
                                                "privateKey": "a valid private key for NGINX Plus"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "402": {
                        "$ref": "#/components/responses/PaymentRequired"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/licenses/nginx-plus-licenses/{licenseName}": {
            "get": {
                "tags": [
                    "License"
                ],
                "summary": "Get the NGINX Plus certificate and key bundle by name",
                "description": "Gets the NGINX Plus certificate and key as a JSON or gzip file.",
                "operationId": "getNginxPlusLicense",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Content-Type",
                        "schema": {
                            "type": "string",
                            "example": "application/json"
                        }
                    },
                    {
                        "name": "licenseName",
                        "description": "The name of the license.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/LicenseName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the specified NGINX Plus license.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NginxPlusLicenseResponse"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "controller-provided",
                                        "ref": "/platform/licenses/nginx-plus-licenses/controller-provided",
                                        "kind": "license"
                                    },
                                    "currenStatus": {
                                        "certKey": "a valid certificate key for NGINX Plus",
                                        "privateKey": "a valid private key for NGINX Plus"
                                    },
                                    "desiredState": {
                                        "certKey": "a valid certificate key for NGINX Plus",
                                        "privateKey": "a valid private key for NGINX Plus"
                                    }
                                }
                            },
                            "application/gzip": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "402": {
                        "$ref": "#/components/responses/PaymentRequired"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/FileNotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/license-file": {
            "post": {
                "deprecated": true,
                "tags": [
                    "License"
                ],
                "summary": "Upload a License",
                "description": "Uploads an NGINX Controller license.\n\nAccepts a single file (encoded as Base64) that may contain one or more product licenses.\n",
                "operationId": "uploadLicense",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LicenseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully uploaded a license.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/License"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "license"
                                    },
                                    "desiredState": {
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 20,
                                                "product": "NGINX Controller API Management",
                                                "serial": 20145,
                                                "type": "PRODUCTION",
                                                "version": 1,
                                                "id": "APIM"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "items": [
                                            {
                                                "expiry": "2021-05-10T00:00:00Z",
                                                "instanceCount": 20,
                                                "product": "NGINX Controller API Management",
                                                "serial": 20145,
                                                "type": "PRODUCTION",
                                                "version": 1,
                                                "id": "APIM"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/login": {
            "post": {
                "tags": [
                    "Login"
                ],
                "summary": "Log in to NGINX Controller",
                "description": "Logs in to the NGINX Controller platform and returns the user account's authentication cookie.\n\nThe session ID is returned in an authentication cookie named `session`. You must include this session ID in the request header for all subsequent requests to authenticate to the platform. For example:\n\n`curl -X GET --cookie 'session=<session cookie>' --header 'Content-type: application/json' 'https://192.0.2.10/api/v1/platform/global'`\n\n- The maximum session lifetime is 8 hours. Sessions are purged within 5 minutes of expiring. Once the session lifetime limit is exceeded, you must log in to obtain a fresh session token.\n- Sessions are purged immediately on logout.\n- Sessions are purged immediately if the user is removed.\n",
                "operationId": "login",
                "requestBody": {
                    "description": "A JSON object containing the type and the authentication information itself.\n- If type == 'BASIC', then the username and password are required.\n- If type == 'ACTIVE_DIRECTORY', then the authentication provider name, username, and password are required.\n- If type == 'AZURE_ACTIVE_DIRECTORY', then the authentication provider name, and type are required.\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        }
                    }
                },
                "security": [],
                "responses": {
                    "200": {
                        "description": "Received request to login with OIDC. Returns the Azure's authorization URL for SSO.\n"
                    },
                    "204": {
                        "description": "Successfully authenticated.\nThe session ID is returned in an authentication cookie named `session`. You must include this session ID in the request header for all subsequent requests.\n",
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "session=.eJwlzjEOwzAIQNG7MGcA22DIZSKbgNI1aaaqd2-kLn96w; HttpOnly; Secure; Path=/"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "409": {
                        "$ref": "#/components/responses/StatusConflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                }
            },
            "get": {
                "tags": [
                    "Login"
                ],
                "summary": "Get Login Session",
                "description": "Checks the validity of the current user's session. Returns the user's account info if the session is valid.",
                "operationId": "sessionsStatus",
                "responses": {
                    "200": {
                        "description": "Successfully validated the session ID and returned the associated user account info.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "example": {
                                    "currentStatus": {
                                        "account": "1",
                                        "authn": "amplify",
                                        "email": "nobody@nodomain.com",
                                        "firstName": "nobody",
                                        "id": 777,
                                        "lastLogin": 1580759750,
                                        "lastName": "here",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/guest",
                                                    "name": "guest"
                                                },
                                                "ref": "/platform/roles/guest"
                                            }
                                        ],
                                        "groups": [
                                            {
                                                "links": {
                                                    "rel": "/api/v1/platform/auth/groups/guest",
                                                    "name": "guest"
                                                },
                                                "ref": "/platform/groups/guest"
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "email": "nobody@nodomain.com",
                                        "firstName": "nobody",
                                        "lastName": "here",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/guest"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-03T19:15:24.916809Z",
                                        "kind": "user",
                                        "name": "nobody@nodomain.com",
                                        "updateTime": "2020-02-03T19:55:50.291147Z"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                }
            }
        },
        "/platform/oidc-handler": {
            "get": {
                "tags": [
                    "OIDC Handler"
                ],
                "summary": "OIDC redirect URL, that handles Login into controller using OIDC",
                "description": "The endpoint that OIDC provider talks to after authenticating the user. It returns the user account's authentication cookie.\n\nThe session ID is returned in an authentication cookie named `session`. You must include this session ID in the request header for all subsequent requests to authenticate to the platform. For example:\n\n`curl -X GET --cookie 'session=<session cookie>' --header 'Content-type: application/json' 'https://192.0.2.10/api/v1/platform/global'`\n\n- The maximum session lifetime is 8 hours.\n- Sessions are purged immediately on logout.\n- Sessions are purged immediately if the user is removed or associated Auth provider is removed.\n  Read more about this here https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow#successful-response\n",
                "operationId": "oidc-handler",
                "parameters": [
                    {
                        "in": "query",
                        "name": "code",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The authorization_code that the app requested. The app exchnages teh code to get access token."
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "type": "string"
                        },
                        "description": "State parameter is included if the app added it in the login request to the Identity provider. This helps prevent CSRF attacks."
                    },
                    {
                        "in": "query",
                        "name": "error",
                        "schema": {
                            "type": "string"
                        },
                        "description": "An error code string sent from the Identity provider when authentication did not go through as expected."
                    },
                    {
                        "in": "query",
                        "name": "error_description",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A specific error message that describes the root cause of the authentication failure."
                    }
                ],
                "security": [],
                "responses": {
                    "302": {
                        "description": "Successfully authenticated and Sends Redirect back to the home page.\nThe session ID is returned in an authentication cookie named `session`. You must include this session ID in the request header for all subsequent requests.\n",
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "session=.eJwlzjEOwzAIQNG7MGcA22DIZSKbgNI1aaaqd2-kLn96w; HttpOnly; Secure; Path=/"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                }
            }
        },
        "/platform/logout": {
            "post": {
                "tags": [
                    "Logout"
                ],
                "summary": "Log out of NGINX Controller",
                "description": "Logs the user account out of the NGINX Controller platform and expires the authentication cookie.",
                "operationId": "logout",
                "responses": {
                    "204": {
                        "description": "The user was successfully logged out.",
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "session=; Expires=Jan 1 1970; Path=/"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                }
            }
        },
        "/platform/login-providers": {
            "get": {
                "tags": [
                    "Login Providers"
                ],
                "summary": "List all Active Authentication Providers",
                "description": "Returns a list of all [authentication providers](#tag/Authentication-Providers) that are configured and ready for use.\n",
                "operationId": "listReadyProviders",
                "responses": {
                    "200": {
                        "description": "Successfully returned a list of the available authentication providers.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListReadyProviders"
                                },
                                "example": {
                                    "providers": [
                                        {
                                            "type": "BASIC",
                                            "name": "local"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/platform/nodes": {
            "get": {
                "tags": [
                    "Nodes"
                ],
                "summary": "List all Nodes",
                "operationId": "getNodeList",
                "description": "Gets information about the NGINX Controller control-plane nodes.",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the NGINX Controller nodes.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeList"
                                },
                                "example": {
                                    "items": [
                                        {
                                            "currentStatus": {
                                                "hostname": "host-1",
                                                "ip": "192.0.2.1",
                                                "state": {
                                                    "conditions": [],
                                                    "selfConfigState": {
                                                        "configured": 1,
                                                        "configuring": 0,
                                                        "deleting": 0,
                                                        "error": 0,
                                                        "isConfigured": true,
                                                        "isConfiguring": false,
                                                        "isDeleting": false,
                                                        "isError": false,
                                                        "total": 1
                                                    }
                                                }
                                            },
                                            "desiredState": {
                                                "hostname": "host-1",
                                                "ip": "192.0.2.1"
                                            },
                                            "metadata": {
                                                "createTime": "2020-09-30T14:14:46Z",
                                                "kind": "node",
                                                "name": "host-1"
                                            }
                                        },
                                        {
                                            "currentStatus": {
                                                "hostname": "host-2",
                                                "ip": "192.0.2.2",
                                                "state": {
                                                    "conditions": [],
                                                    "selfConfigState": {
                                                        "configured": 1,
                                                        "configuring": 0,
                                                        "deleting": 0,
                                                        "error": 0,
                                                        "isConfigured": true,
                                                        "isConfiguring": false,
                                                        "isDeleting": false,
                                                        "isError": false,
                                                        "total": 1
                                                    }
                                                }
                                            },
                                            "desiredState": {
                                                "hostname": "host-2",
                                                "ip": "192.0.2.2"
                                            },
                                            "metadata": {
                                                "createTime": "2020-09-30T14:19:13.755911Z",
                                                "kind": "node",
                                                "name": "host-2"
                                            }
                                        },
                                        {
                                            "currentStatus": {
                                                "hostname": "host-3",
                                                "ip": "192.0.2.3",
                                                "state": {
                                                    "conditions": [],
                                                    "selfConfigState": {
                                                        "configured": 1,
                                                        "configuring": 0,
                                                        "deleting": 0,
                                                        "error": 0,
                                                        "isConfigured": true,
                                                        "isConfiguring": false,
                                                        "isDeleting": false,
                                                        "isError": false,
                                                        "total": 1
                                                    }
                                                }
                                            },
                                            "desiredState": {
                                                "hostname": "host-3",
                                                "ip": "192.0.2.3"
                                            },
                                            "metadata": {
                                                "createTime": "2020-09-30T14:19:16.155299Z",
                                                "kind": "node",
                                                "name": "host-3"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Nodes"
                ],
                "summary": "Create a Node",
                "operationId": "addNode",
                "description": "Creates a new NGINX Controller control-plane node.\n\nAfter a node has been created, you must install NGINX Controller on the node to finish adding the node to the cluster.\nIn the JSON response, look for the `install.sh` command and join-key located under `currentStatus.state.conditions.message`.\nThe `type` is `install`. Copy and run this command with the join-key on the new node to finish the setup.\n\nNote: (Optional) If you're adding a deleted node back to the cluster, you must uninstall NGINX Controller from the node before \nrunning the `install.sh` command with the new join-key. To uninstall NGINX Controller, run the uninstall script on the node: \n`/opt/nginx-controller/uninstall.sh`.\n",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node"
                            },
                            "example": {
                                "desiredState": {
                                    "hostname": "host-2",
                                    "ip": "192.0.2.2"
                                },
                                "metadata": {
                                    "name": "host-2"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created the NGINX Controller node.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node"
                                },
                                "example": {
                                    "currentStatus": {
                                        "hostname": "host-2",
                                        "ip": "192.0.2.2",
                                        "state": {
                                            "conditions": [
                                                {
                                                    "message": "install.sh --join-key eyJlbmRwb2ludCI6IjE5Mi4wLjIuMTo2NDQzIiwiY2FDZXJ0SGFzaCI6InNoYTI1Njp4IiwiZW5jcnlwdGlvblNlY3JldCI6IngiLCJ0b2tlbiI6IngiLCJjZXJ0aWZpY2F0ZUtleSI6IngifQo=",
                                                    "type": "install"
                                                }
                                            ],
                                            "selfConfigState": {
                                                "configured": 0,
                                                "configuring": 1,
                                                "deleting": 0,
                                                "error": 0,
                                                "isConfigured": false,
                                                "isConfiguring": true,
                                                "isDeleting": false,
                                                "isError": false,
                                                "total": 1
                                            }
                                        }
                                    },
                                    "desiredState": {
                                        "hostname": "host-2",
                                        "ip": "192.0.2.2"
                                    },
                                    "metadata": {
                                        "createTime": "2020-10-01T10:03:39.228626Z",
                                        "kind": "node",
                                        "name": "host-2"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "501": {
                        "$ref": "#/components/responses/NotImplemented"
                    }
                }
            }
        },
        "/platform/nodes/{nodeName}": {
            "get": {
                "tags": [
                    "Nodes"
                ],
                "summary": "Get a Node",
                "operationId": "getNode",
                "description": "Gets information about an NGINX Controller control-plane node by name.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/nodeName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the specified NGINX Controller node.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node"
                                },
                                "example": {
                                    "currentStatus": {
                                        "hostname": "host-2",
                                        "ip": "192.0.2.2",
                                        "state": {
                                            "conditions": [
                                                {
                                                    "message": "install.sh --join-key eyJlbmRwb2ludCI6IjE5Mi4wLjIuMTo2NDQzIiwiY2FDZXJ0SGFzaCI6InNoYTI1Njp4IiwiZW5jcnlwdGlvblNlY3JldCI6IngiLCJ0b2tlbiI6IngiLCJjZXJ0aWZpY2F0ZUtleSI6IngifQo=",
                                                    "type": "install"
                                                }
                                            ],
                                            "selfConfigState": {
                                                "configured": 0,
                                                "configuring": 1,
                                                "deleting": 0,
                                                "error": 0,
                                                "isConfigured": false,
                                                "isConfiguring": true,
                                                "isDeleting": false,
                                                "isError": false,
                                                "total": 1
                                            }
                                        }
                                    },
                                    "desiredState": {
                                        "hostname": "host-2",
                                        "ip": "192.0.2.2"
                                    },
                                    "metadata": {
                                        "createTime": "2020-10-01T10:03:39.228626Z",
                                        "kind": "node",
                                        "name": "host-2"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Nodes"
                ],
                "summary": "Delete a Node",
                "operationId": "deleteNode",
                "description": "Deletes an NGINX Controller control-plane node by name.\nThe node's status is `isDeleting` while the workloads\nare being drained from it. Once draining is complete the node is deleted.\n\nNote: (Optional) You must uninstall NGINX Controller from the deleted node before you can add the node back to the cluster. \nTo uninstall NGINX Controller, run the uninstall script on the node: `/opt/nginx-controller/uninstall.sh`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/nodeName"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully scheduled the node to be deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node"
                                },
                                "example": {
                                    "currentStatus": {
                                        "hostname": "host-2",
                                        "ip": "192.0.2.2",
                                        "state": {
                                            "conditions": [],
                                            "selfConfigState": {
                                                "configured": 1,
                                                "configuring": 0,
                                                "deleting": 1,
                                                "error": 0,
                                                "isConfigured": true,
                                                "isConfiguring": false,
                                                "isDeleting": true,
                                                "isError": false,
                                                "total": 1
                                            }
                                        }
                                    },
                                    "desiredState": {
                                        "hostname": "host-2",
                                        "ip": "192.0.2.2"
                                    },
                                    "metadata": {
                                        "createTime": "2020-10-01T10:03:39.228626Z",
                                        "kind": "node",
                                        "name": "host-2"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "501": {
                        "$ref": "#/components/responses/NotImplemented"
                    }
                }
            }
        },
        "/platform/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "List Roles",
                "description": "Returns an unfiltered list of all Role resources.",
                "operationId": "getRoles",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all of the Role resources.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleListResponse"
                                },
                                "example": {
                                    "items": [
                                        {
                                            "currentStatus": {
                                                "permissions": [
                                                    {
                                                        "access": "FULL",
                                                        "path": "/"
                                                    }
                                                ]
                                            },
                                            "desiredState": {
                                                "permissions": [
                                                    {
                                                        "access": "FULL",
                                                        "path": "/"
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "createTime": "2020-02-24T21:29:59.866708Z",
                                                "kind": "role",
                                                "name": "admin"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create a Role",
                "description": "Creates a new Role resource.",
                "operationId": "createRole",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            },
                            "example": {
                                "desiredState": {
                                    "permissions": [
                                        {
                                            "access": "READ",
                                            "path": "/services/environments/dev/"
                                        },
                                        {
                                            "access": "WRITE",
                                            "path": "/services/environments/test/"
                                        }
                                    ]
                                },
                                "metadata": {
                                    "kind": "role",
                                    "name": "role1",
                                    "tags": [
                                        "dev",
                                        "test"
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created the requested Role resource.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                },
                                "example": {
                                    "currentStatus": {
                                        "permissions": [
                                            {
                                                "access": "READ",
                                                "path": "/services/environments/dev/"
                                            },
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/test/"
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "permissions": [
                                            {
                                                "access": "READ",
                                                "path": "/services/environments/dev/"
                                            },
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/test/"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "role",
                                        "name": "role1",
                                        "tags": [
                                            "dev",
                                            "test"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/roles/{roleName}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a Role",
                "description": "Returns information about a specific Role resource by its name.\n",
                "operationId": "getRoleByName",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/roleName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the requested Role resource.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                },
                                "example": {
                                    "currentStatus": {
                                        "permissions": [
                                            {
                                                "access": "READ",
                                                "path": "/services/environments/test/"
                                            },
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/dev/"
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "permissions": [
                                            {
                                                "access": "READ",
                                                "path": "/services/environments/test/"
                                            },
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/dev/"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "role",
                                        "name": "role1",
                                        "tags": [
                                            "dev",
                                            "test"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Upsert a Role",
                "description": "Creates a new Role resource or updates an existing Role resource.\n",
                "operationId": "upsertRole",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/roleName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            },
                            "example": {
                                "desiredState": {
                                    "permissions": [
                                        {
                                            "access": "WRITE",
                                            "path": "/services/environments/dev/"
                                        }
                                    ]
                                },
                                "metadata": {
                                    "kind": "role",
                                    "name": "role1",
                                    "tags": [
                                        "dev",
                                        "test"
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the specified Role resource.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                },
                                "example": {
                                    "currentStatus": {
                                        "permissions": [
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/dev/"
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "permissions": [
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/dev/"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "role",
                                        "name": "role1",
                                        "updateTime": "2020-02-24T22:53:14.340686Z",
                                        "tags": [
                                            "dev",
                                            "test"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created the specified Role resource.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                },
                                "example": {
                                    "currentStatus": {
                                        "permissions": [
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/dev/"
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "permissions": [
                                            {
                                                "access": "WRITE",
                                                "path": "/services/environments/dev/"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "role",
                                        "name": "role1",
                                        "updateTime": "2020-02-24T22:53:14.340686Z",
                                        "tags": [
                                            "dev",
                                            "test"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a Role",
                "description": "Deletes a specific Role resource.",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/roleName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the role. No content was returned."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List all Users",
                "operationId": "listUsers",
                "description": "Returns an unfiltered list of all User resources.",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of User resources.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserListResponse"
                                },
                                "example": {
                                    "items": [
                                        {
                                            "metadata": {
                                                "name": "john.doe@nginx.com",
                                                "kind": "user",
                                                "createTime": "2019-07-29T09:12:33.001Z",
                                                "displayName": "John Doe",
                                                "description": "NGINX controller user with prod env role"
                                            },
                                            "desiredState": {
                                                "firstName": "John",
                                                "lastName": "Doe",
                                                "email": "john.doe@nginx.com",
                                                "password": "********",
                                                "roles": [
                                                    {
                                                        "ref": "/platform/roles/prod"
                                                    }
                                                ]
                                            },
                                            "currentStatus": {
                                                "account": "1",
                                                "id": 123,
                                                "firstName": "John",
                                                "lastName": "Doe",
                                                "lastLogin": 1570132969,
                                                "email": "john.doe@nginx.com",
                                                "authn": "amplify",
                                                "password": "********",
                                                "roles": [
                                                    {
                                                        "ref": "/platform/roles/prod",
                                                        "links": {
                                                            "rel": "/api/v1/platform/roles/prod",
                                                            "name": "prod"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a User",
                "operationId": "addUser",
                "description": "Creates a new User resource.",
                "requestBody": {
                    "description": "Defines the details to use for the new User resource.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            },
                            "example": {
                                "metadata": {
                                    "name": "john.doe@nginx.com",
                                    "displayName": "John Doe",
                                    "description": "NGINX controller user with prod env role"
                                },
                                "desiredState": {
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "email": "john.doe@nginx.com",
                                    "password": "passwd123",
                                    "roles": [
                                        {
                                            "ref": "/platform/roles/prod"
                                        }
                                    ],
                                    "groups": [
                                        {
                                            "ref": "/platform/groups/guest"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created the requested User resource.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "john.doe@nginx.com",
                                        "kind": "user",
                                        "createTime": "2019-07-29T09:12:33.001Z",
                                        "displayName": "John Doe",
                                        "description": "NGINX controller user with prod env role"
                                    },
                                    "desiredState": {
                                        "firstName": "John",
                                        "lastName": "Doe",
                                        "email": "john.doe@nginx.com",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/prod"
                                            }
                                        ],
                                        "groups": [
                                            {
                                                "ref": "/platform/groups/guest"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "account": "1",
                                        "id": 123,
                                        "firstName": "John",
                                        "lastName": "Doe",
                                        "lastLogin": 1570132969,
                                        "email": "john.doe@nginx.com",
                                        "authn": "amplify",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/prod",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/prod",
                                                    "name": "prod"
                                                }
                                            }
                                        ],
                                        "groups": [
                                            {
                                                "links": {
                                                    "rel": "/api/v1/platform/auth/groups/guest",
                                                    "name": "guest"
                                                },
                                                "ref": "/platform/groups/guest"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/platform/users/{userName}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a User",
                "operationId": "getUser",
                "description": "Gets information for an existing User resource.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/userName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the requested User resource.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "john.doe@nginx.com",
                                        "kind": "user",
                                        "createTime": "2019-07-29T09:12:33.001Z",
                                        "displayName": "John Doe",
                                        "description": "NGINX controller user with prod env role"
                                    },
                                    "desiredState": {
                                        "firstName": "John",
                                        "lastName": "Doe",
                                        "email": "john.doe@nginx.com",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/prod"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "account": "1",
                                        "id": 123,
                                        "firstName": "John",
                                        "lastName": "Doe",
                                        "lastLogin": 1570132969,
                                        "email": "john.doe@nginx.com",
                                        "authn": "amplify",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/prod",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/prod",
                                                    "name": "prod"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a User",
                "operationId": "updateUser",
                "description": "Updates an existing User resource.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/userName"
                    }
                ],
                "requestBody": {
                    "description": "Defines the updates to make to the specified User resource.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUser"
                            },
                            "example": {
                                "metadata": {
                                    "name": "john.doe@nginx.com",
                                    "displayName": "Jane Doe",
                                    "description": "NGINX controller user with prod env role"
                                },
                                "desiredState": {
                                    "firstName": "Jane",
                                    "lastName": "Doe",
                                    "password": "NewPassWd1234",
                                    "verifyPassword": "OldPassWd1234",
                                    "roles": [
                                        {
                                            "ref": "/platform/roles/new"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the specified User resource.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUser"
                                },
                                "example": {
                                    "metadata": {
                                        "name": "john.doe@nginx.com",
                                        "kind": "user",
                                        "createTime": "2019-07-29T09:12:33.001Z",
                                        "displayName": "Jane Doe",
                                        "description": "NGINX controller user with prod env role"
                                    },
                                    "desiredState": {
                                        "firstName": "Jane",
                                        "lastName": "Doe",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/new"
                                            }
                                        ]
                                    },
                                    "currentStatus": {
                                        "account": "1",
                                        "id": 123,
                                        "firstName": "Jane",
                                        "lastName": "Doe",
                                        "lastLogin": 1570132969,
                                        "email": "john.doe@nginx.com",
                                        "authn": "amplify",
                                        "password": "********",
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/new",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/new",
                                                    "name": "new"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a User",
                "operationId": "deleteUser",
                "description": "Deletes a User resource.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/userName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the user. No content was returned."
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/platform/integrations": {
            "get": {
                "tags": [
                    "Integrations"
                ],
                "summary": "List all Integrations",
                "description": "Returns an unfiltered list of integration accounts.",
                "operationId": "listIntegrations",
                "responses": {
                    "200": {
                        "description": "Successfully retreived a list of integration accounts.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListIntegrationResponse"
                                },
                                "examples": {
                                    "INTEGRATIONS": {
                                        "$ref": "#/components/examples/ListIntegrationResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Integrations"
                ],
                "summary": "Create an Integration account",
                "description": "Creates a new integration account.",
                "operationId": "addIntegration",
                "requestBody": {
                    "description": "Defines the integration account to be added.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Integration"
                            },
                            "examples": {
                                "AWS": {
                                    "$ref": "#/components/examples/AWSRequest"
                                },
                                "Splunk": {
                                    "$ref": "#/components/examples/SplunkRequest"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created the requested integration.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIntegrationResponse"
                                },
                                "examples": {
                                    "AWS": {
                                        "$ref": "#/components/examples/AWSResponse"
                                    },
                                    "Splunk": {
                                        "$ref": "#/components/examples/SplunkResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                },
                                "examples": {
                                    "BadReq": {
                                        "$ref": "#/components/examples/BadRequestError"
                                    }
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The request failed due to a conflict with an existing integration.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                },
                                "examples": {
                                    "AlreadyExists": {
                                        "$ref": "#/components/examples/AlreadyExistsError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/platform/integrations/{integrationName}": {
            "get": {
                "tags": [
                    "Integrations"
                ],
                "summary": "Get an Integration account",
                "description": "Gets information about a specific integration account.",
                "operationId": "getIntegration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IntegrationName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the requested integration account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIntegrationResponse"
                                },
                                "examples": {
                                    "AWS": {
                                        "$ref": "#/components/examples/AWSResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Integration resource not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFoundError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Integrations"
                ],
                "summary": "Upsert an Integration account",
                "description": "Creates a new integration account or updates an existing integration account.",
                "operationId": "upsertIntegration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IntegrationName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Integration"
                            },
                            "examples": {
                                "AWS": {
                                    "$ref": "#/components/examples/AWSRequest"
                                },
                                "Splunk": {
                                    "$ref": "#/components/examples/SplunkRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully received the request to update the specified integration account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIntegrationResponse"
                                },
                                "examples": {
                                    "AWS": {
                                        "$ref": "#/components/examples/AWSResponse"
                                    },
                                    "Splunk": {
                                        "$ref": "#/components/examples/SplunkResponse"
                                    }
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully updated the specified integration account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIntegrationResponse"
                                },
                                "examples": {
                                    "AWS": {
                                        "$ref": "#/components/examples/AWSResponse"
                                    },
                                    "Splunk": {
                                        "$ref": "#/components/examples/SplunkResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                },
                                "examples": {
                                    "BadReq": {
                                        "$ref": "#/components/examples/BadRequestError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Integrations"
                ],
                "summary": "Update an Integration account",
                "description": "Updates an existing integration account.",
                "operationId": "updateIntegration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IntegrationName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateIntegration"
                            },
                            "examples": {
                                "AWS": {
                                    "$ref": "#/components/examples/AWSRequestForPatch"
                                },
                                "Splunk": {
                                    "$ref": "#/components/examples/SplunkRequestForPatch"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully received the request to update the specified integration account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateIntegration"
                                },
                                "examples": {
                                    "AWS": {
                                        "$ref": "#/components/examples/AWSResponseForPatch"
                                    },
                                    "Splunk": {
                                        "$ref": "#/components/examples/SplunkResponseForPatch"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                },
                                "examples": {
                                    "BadReq": {
                                        "$ref": "#/components/examples/BadRequestError"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Integration resource not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFoundError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Integrations"
                ],
                "summary": "Delete an Integration account",
                "description": "Deletes the specified integration account.",
                "operationId": "deleteIntegration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IntegrationName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the specified integration account."
                    },
                    "404": {
                        "description": "Integration not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFoundError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/platform/auth/groups": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List Authentication Groups",
                "description": "Returns an unfiltered list of all of the authentication groups.\n\nAn authentication group (or \"AuthN Group\") is a collection of Roles. All AuthN Groups are globally unique. You can assign AuthN Groups to external authentication provider properties (such as AD Groups).\n",
                "operationId": "getGroups",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all authentication groups.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupListResponse"
                                },
                                "example": {
                                    "items": [
                                        {
                                            "currentStatus": {
                                                "roles": [
                                                    {
                                                        "ref": "/platform/roles/admin",
                                                        "links": {
                                                            "rel": "/api/v1/platform/roles/admin",
                                                            "name": "admin",
                                                            "displayName": "Admin Role"
                                                        }
                                                    }
                                                ]
                                            },
                                            "desiredState": {
                                                "roles": [
                                                    {
                                                        "ref": "/platform/roles/user"
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "createTime": "2020-02-24T21:29:59.866708Z",
                                                "kind": "group",
                                                "name": "us-group-1"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add an Authentication Group",
                "description": "Creates a new authentication group.",
                "operationId": "createGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Group"
                            },
                            "example": {
                                "desiredState": {
                                    "roles": [
                                        {
                                            "ref": "/platform/roles/user"
                                        },
                                        {
                                            "ref": "/platform/roles/custom-1"
                                        }
                                    ]
                                },
                                "metadata": {
                                    "kind": "group",
                                    "name": "group-1"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created the requested authentication group.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                },
                                "example": {
                                    "currentStatus": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/user",
                                                    "name": "user",
                                                    "displayName": "User Role"
                                                }
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/custom-1",
                                                    "name": "custom-1",
                                                    "displayName": "First Custom Role"
                                                }
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user"
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "group",
                                        "name": "group-1"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        },
        "/platform/auth/groups/{groupName}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get an Authentication Group",
                "description": "Returns information about a specific Authentication Group resource.\n",
                "operationId": "getGroupByName",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/groupName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the requested Authentication Group resource.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                },
                                "example": {
                                    "currentStatus": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/user",
                                                    "name": "user",
                                                    "displayName": "User Role"
                                                }
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/custom-1",
                                                    "name": "custom-1",
                                                    "displayName": "First Custom Role"
                                                }
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user"
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "group",
                                        "name": "group-1"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "put": {
                "tags": [
                    "Groups"
                ],
                "summary": "Upsert an Authentication Group",
                "description": "Creates a new Authentication Group resource or updates an existing Authentication Group.\n",
                "operationId": "upsertGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/groupName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Group"
                            },
                            "example": {
                                "desiredState": {
                                    "roles": [
                                        {
                                            "ref": "/platform/roles/user"
                                        },
                                        {
                                            "ref": "/platform/roles/custom-1"
                                        }
                                    ]
                                },
                                "metadata": {
                                    "kind": "group",
                                    "name": "group-1"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the specified group.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                },
                                "example": {
                                    "currentStatus": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/user",
                                                    "name": "user",
                                                    "displayName": "User Role"
                                                }
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/custom-1",
                                                    "name": "custom-1",
                                                    "displayName": "First Custom Role"
                                                }
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user"
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "group",
                                        "name": "group-1",
                                        "updateTime": "2020-02-24T22:53:14.340686Z"
                                    }
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created the specified group.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                },
                                "example": {
                                    "currentStatus": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/user",
                                                    "name": "user",
                                                    "displayName": "User Role"
                                                }
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1",
                                                "links": {
                                                    "rel": "/api/v1/platform/roles/custom-1",
                                                    "name": "custom-1",
                                                    "displayName": "First Custom Role"
                                                }
                                            }
                                        ]
                                    },
                                    "desiredState": {
                                        "roles": [
                                            {
                                                "ref": "/platform/roles/user"
                                            },
                                            {
                                                "ref": "/platform/roles/custom-1"
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "group",
                                        "name": "group-1",
                                        "updateTime": "2020-02-24T22:53:14.340686Z"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete an Authentication Group",
                "description": "Deletes a specific authentication group.",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/groupName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Succesfully deleted the authentication group. No content was returned."
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/Internal"
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "session"
            }
        },
        "parameters": {
            "nodeName": {
                "in": "path",
                "name": "nodeName",
                "description": "The name of the node.",
                "schema": {
                    "type": "string"
                },
                "required": true
            },
            "roleName": {
                "in": "path",
                "name": "roleName",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "The name of the Role.\n"
            },
            "userName": {
                "in": "path",
                "name": "userName",
                "schema": {
                    "type": "string",
                    "format": "email"
                },
                "required": true,
                "description": "The name for the User resource.\n"
            },
            "code": {
                "in": "path",
                "name": "code",
                "schema": {
                    "type": "string",
                    "minLength": 1
                },
                "required": true,
                "description": "The password recovery code.\n"
            },
            "IntegrationName": {
                "name": "integrationName",
                "in": "path",
                "description": "The name of the integration account.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "groupName": {
                "in": "path",
                "name": "groupName",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "description": "The name of the group.\n"
            }
        },
        "responses": {
            "BadRequest": {
                "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "code": 4005,
                            "message": "Error verifying the authorization: could not decode the request. Check the request body and try again."
                        }
                    }
                }
            },
            "Unauthorized": {
                "description": "User authentication is invalid or missing.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "code": 401,
                            "message": "authentication needed"
                        }
                    }
                }
            },
            "Forbidden": {
                "description": "The request failed because of insufficient privileges.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "code": 403,
                            "message": "unauthorized"
                        }
                    }
                }
            },
            "Internal": {
                "description": "The request cannot be processed because of an internal server error.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "code": 4000,
                            "message": "An internal error occurred while verifying the authorization. If the problem persists, contact the system administrator."
                        }
                    }
                }
            },
            "InternalServerError": {
                "description": "The request cannot be processed because of an internal server error.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                }
            },
            "Conflict": {
                "description": "The request failed due to a conflict with an existing Node resource.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                }
            },
            "NotImplemented": {
                "description": "The request method is not supported by the server in the current configuration and cannot be handled.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                }
            },
            "ServiceUnavailable": {
                "description": "The request cannot be processed because service is unavailable. Please try resending the request. \n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "message": "Error retrieving the user information. Try resending the request.",
                            "code": 2351
                        }
                    }
                }
            },
            "StatusConflict": {
                "description": "Wrong username and/or password.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "message": "Error logging in: incorrect username or password. Check the login credentials, then try resending the request.",
                            "code": 2379
                        }
                    }
                }
            },
            "NotFound": {
                "description": "The specified authentication group was not found.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "code": 8920,
                            "message": "Error getting or deleting group: group not found."
                        }
                    }
                }
            },
            "PaymentRequired": {
                "description": "The request failed due to missing or expired license.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "code": 4700,
                            "details": [
                                {
                                    "description": "Error getting the NGINX Plus certificate and public key: the license is either expired or no license exists. Upload a valid license file and then try again."
                                }
                            ],
                            "message": "payment required."
                        }
                    }
                }
            },
            "FileNotFound": {
                "description": "The requested certificate and key could not be found.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        },
                        "example": {
                            "code": 4600,
                            "details": [
                                {
                                    "description": "The requested resource was not found or is unavailable."
                                }
                            ],
                            "message": "The requested NGINX Plus license is not found or is unavailable."
                        }
                    }
                }
            }
        },
        "schemas": {
            "VerifyList": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthRequest"
                        },
                        "description": "Contains a list of authentication requests.\n"
                    }
                }
            },
            "AuthRequest": {
                "type": "object",
                "required": [
                    "path",
                    "method"
                ],
                "example": {
                    "items": [
                        {
                            "path": "/services/environments/test1",
                            "method": "DELETE",
                            "permitted": false
                        },
                        {
                            "path": "/services/environments/test2",
                            "method": "PUT",
                            "permitted": true
                        }
                    ]
                },
                "properties": {
                    "path": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string",
                        "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE",
                            "HEAD",
                            "TRACE",
                            "PATCH",
                            "CONNECT",
                            "OPTIONS"
                        ]
                    },
                    "permitted": {
                        "type": "boolean"
                    }
                }
            },
            "ErrorDetail": {
                "type": "object",
                "required": [
                    "description"
                ],
                "properties": {
                    "description": {
                        "type": "string",
                        "example": "Error doing <action>: <reason for error>. This can lead to <potential consequences>. Try <action> to resolve the issue.",
                        "description": "A detailed error message returned by the server. \n\nThese messages contain the following information, where applicable:\n\n- What happened.\n- Why it happened.\n- What the consequences are (if any).\n- Recommended action to take to resolve the issue.\n"
                    }
                }
            },
            "ErrorModel": {
                "type": "object",
                "required": [
                    "message",
                    "code"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Error doing <action>.",
                        "description": "A human-readable message, in English, that describes the error.\n"
                    },
                    "code": {
                        "type": "integer",
                        "example": 1234567,
                        "description": "A numeric error code that can be used to identify errors for support purposes.\n"
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorDetail"
                        }
                    }
                }
            },
            "NodeList": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Node"
                        }
                    }
                }
            },
            "Node": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "currentStatus": {
                        "allOf": [
                            {
                                "properties": {
                                    "state": {
                                        "$ref": "#/components/schemas/ConfigState"
                                    }
                                }
                            },
                            {
                                "$ref": "#/components/schemas/NodeDef"
                            }
                        ]
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/NodeDef"
                    }
                }
            },
            "NodeDef": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "format": "hostname",
                        "description": "The hostname for the NGINX Controller control-plane node. When adding a node, you must provide a hostname or an IP address, or you can specify both. The hostname must be the real hostname, which you can look up by running the `hostname` command."
                    },
                    "ip": {
                        "type": "string",
                        "format": "ipv4",
                        "example": "192.0.2.0",
                        "description": "The IP address for the NGINX Controller control-plane node. When adding a node, you must provide an IP address or a hostname, or you can specify both."
                    }
                }
            },
            "SelfLinks": {
                "type": "object",
                "description": "The SelfLinks object contains a link from the resource to itself.\nThis object is used only in responses.\n",
                "properties": {
                    "rel": {
                        "type": "string",
                        "example": "/api/v1/services/environments/prod",
                        "description": "`rel` contains the complete path fragment of a URI and can be used\nto construct a query to the object.\n"
                    }
                }
            },
            "ResourceMeta": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "pattern": "^[^A-Z\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=&\\~\\^|#<>]+$",
                        "not": {
                            "type": "string",
                            "enum": [
                                ".",
                                ".."
                            ]
                        },
                        "minLength": 1,
                        "maxLength": 1024,
                        "example": "resource-name",
                        "description": "Resource name is a unique identifier for a resource within the context of a namespace.\nResource names must conform to [RFC 1738 Section 2.2](https://www.ietf.org/rfc/rfc1738.txt) and have a valid syntax for email addresses. The following rules are enforced:\n\n- do not utilize URL encoding;\n- do not include spaces;\n- do not use uppercase characters, for example, 'A-Z'; extended character sets are supported;\n- do not use the following characters: `\"`, `*`, `:`, `;`, `/`, `\\`, `%`, `?`, `hash`, `=`, `&`, `|`, `~`, `^`, `{`, `}`, `[`, `]`, `<`, `>`;\n- cannot start or end with an `@` sign;\n- cannot be only `.` or `..`\n\nFor example: For a collection resource located at\n\n`https://controller.example.com/api/v1/services/apps/shopping_@1`\n\nthe resource name is \"shopping_@1\".\n"
                    },
                    "displayName": {
                        "type": "string",
                        "example": "My Display Name",
                        "description": "`displayName` is a user friendly resource name. It can be used to define \na longer, and less constrained, name for a resource.\n\nDisplay names:\n\n- are optional (defaults to an empty string if no value is provided),\n- do not have to be unique, \n- cannot be assigned by the server.\n"
                    },
                    "description": {
                        "type": "string",
                        "example": "This is a sample description string. It provides information about the resource.",
                        "description": "`description` is a free-form text property. You can use it to provide information that helps \nto identify the resource.\n\nDescriptions:\n\n- are optional (defaults to an empty string if no value is provided),\n- do not have to be unique, \n- cannot be assigned by the server.\n"
                    },
                    "kind": {
                        "type": "string",
                        "example": "<collection>-<object>",
                        "description": "Kind is a string representation of an API resource's data type.\nIt is assigned by the server and cannot be changed. \n\nWhen creating a `kind`, the server uses hyphens to connect word segments; \nsingleton and collection item resources are not pluralized.\n"
                    },
                    "uid": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                        "description": "Unique Identifier (UID)\n\nUID is a unique identifier in time and space for a resource. \nWhen you create a resource, the server assigns a UID to the resource.\n\nRefer to [IETF RFC 4122](https://tools.ietf.org/html/rfc4122) for more information.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "production_public",
                            "dev",
                            "new_app",
                            "us-west-1",
                            "emea"
                        ],
                        "description": "You can assign `tags` to a resource as a way to help map, scope, \nand organize resources. \n\nThe system uses tag selectors to specify selection criteria that \nmatch resources that have particular tags.\n"
                    },
                    "ref": {
                        "type": "string",
                        "example": "/services/environments/prod",
                        "description": "The `ref` field contains a reference to another NGINX Controller resource.\n"
                    },
                    "links": {
                        "$ref": "#/components/schemas/SelfLinks"
                    },
                    "createTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2019-07-29T09:12:33.001Z",
                        "description": "A timestamp that represents the server time when the resource was created.\n\nCreate time is not guaranteed to be set in \"happens-before\" order\nacross separate operations.\n\nIn JSON format, `create_time` type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt).\n\nFor example: 2018-04-01T01:30:15.01Z\n\nCreate Time is assigned by the server and cannot be changed.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2019-07-29T10:12:33.001Z",
                        "description": "A timestamp that represents the server time when the resource was last modified.\n\nResources that have never been updated do not have an `update_time` stamp.\n\nThe default value for resources that have never been updated is the local \nlanguage-specific equivalent of \"null\".\n\nIn JSON format, `update_time` type is encoded as a string as described in \n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt).\n"
                    }
                }
            },
            "ConfigStateTally": {
                "type": "object",
                "properties": {
                    "isConfigured": {
                        "type": "boolean",
                        "description": "The configuration operation is complete."
                    },
                    "isConfiguring": {
                        "type": "boolean",
                        "description": "The configuration of the resource, or of its child(ren), is in process."
                    },
                    "isError": {
                        "type": "boolean",
                        "description": "An error occurred while configuring the resource or its child(ren)."
                    },
                    "isDeleting": {
                        "type": "boolean",
                        "description": "A delete operation is in progress for the resource or its child(ren)."
                    },
                    "total": {
                        "type": "integer",
                        "description": "The total number of resources to which the configuration operation applies."
                    },
                    "configured": {
                        "type": "integer",
                        "description": "The number of resources that have a complete and valid configuration."
                    },
                    "configuring": {
                        "type": "integer",
                        "description": "The number of resources that are in the process of being configured."
                    },
                    "error": {
                        "type": "integer",
                        "description": "The number of resources that have encountered an error during the configuration process."
                    },
                    "deleting": {
                        "type": "integer",
                        "description": "The number of resources that are in the process of being deleted."
                    }
                }
            },
            "ConfigCondition": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The condition type."
                    },
                    "message": {
                        "type": "string",
                        "description": "A human-readable message that provides additional information about the configuration operation."
                    }
                }
            },
            "ConfigState": {
                "type": "object",
                "description": "A representation of the resource's current configuration state \nthat comprises the status of the resource itself (`selfConfigState`) and any child \nresources (`childrenConfigState`).\n\nThe conditions array provides additional information during configuration changes.\n",
                "properties": {
                    "selfConfigState": {
                        "$ref": "#/components/schemas/ConfigStateTally"
                    },
                    "childrenConfigState": {
                        "$ref": "#/components/schemas/ConfigStateTally"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfigCondition"
                        }
                    }
                }
            },
            "RoleListResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        },
                        "description": "Contains list of Role objects.\n"
                    }
                }
            },
            "Role": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/RoleDef"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/RoleDef"
                    }
                }
            },
            "RoleDef": {
                "type": "object",
                "required": [
                    "permissions"
                ],
                "description": "A Role is a collection of permissions and child Roles. All Roles are globally unique. You can assign Roles to users or to other Roles.\n",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        }
                    }
                }
            },
            "Permission": {
                "type": "object",
                "required": [
                    "access",
                    "path"
                ],
                "description": "A Permission is a pair consisting of a path or object and the desired level of access. Permissions govern Users ability to access specific paths or objects within an Environment.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "example": "/services/environments/dev/",
                        "pattern": "^(\\/[^A-Z\\s\\x00-\\x1f\\x60\\x7f\\;\\\"\\[\\]\\{\\}\\\\\\/]*)+",
                        "description": "The path represents an area of the platform to which the Role grants access. For example, to allow the Role to access an Environment named \"dev\", you would define the path \"/services/environments/dev\".\n"
                    },
                    "access": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "READ",
                            "WRITE",
                            "FULL"
                        ],
                        "description": "Access determines the Role's ability to access a path or object. The options are:\n* NONE: Does not have any access to the path or object\n* READ: Has read only access (HTTP GET requests)\n* WRITE: Has read and write access (POST, PUT, PATCH requests) but cannot delete\n* FULL: Has read, write and delete access\n"
                    }
                }
            },
            "ListAuthProviders": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthProvider"
                        }
                    }
                }
            },
            "AuthProvider": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/AuthProviderDef"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/AuthProviderDef"
                    }
                }
            },
            "AuthProviderDef": {
                "type": "object",
                "properties": {
                    "provider": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ActiveDirectory"
                            },
                            {
                                "$ref": "#/components/schemas/AzureActiveDirectory"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "ACTIVE_DIRECTORY": "#/components/schemas/ActiveDirectory",
                                "AZURE_ACTIVE_DIRECTORY": "#/components/schemas/AzureActiveDirectory"
                            }
                        },
                        "example": {
                            "provider": {
                                "type": "ACTIVE_DIRECTORY",
                                "status": "CONNECTED_BOUND",
                                "domain": "DC=mydomain,DC=example,DC=com",
                                "defaultLoginDomain": "mydomain",
                                "connection": [
                                    {
                                        "uri": "ldap://dc1.mydomain.com",
                                        "sslMode": "REQUIRE",
                                        "rawCa": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                                    }
                                ],
                                "groupSearchFilter": "(objectClass=group)",
                                "groupMemberAttribute": "memberof",
                                "userFormat": "UPN",
                                "bindUser": {
                                    "type": "PASSWORD",
                                    "username": "user@mydomain",
                                    "password": "********"
                                },
                                "pollIntervalSec": 3600,
                                "groupCacheTimeSec": 7200,
                                "honorStaleGroups": false,
                                "filteredGroups": [
                                    "CN=Office_Admins_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                    "CN=RM_SF,OU=San Francisco,OU=North America,OU=Acme Financial",
                                    "CN=Sales_Warsaw,OU=Warsaw,OU=Europe,OU=Acme Financial",
                                    "CN=ACC_EU,OU=Europe,OU=Acme Financial"
                                ],
                                "groupMappings": [
                                    {
                                        "external": "Engineering-US-West",
                                        "caseSensitive": true,
                                        "internal": {
                                            "ref": "/platform/auth/groups/eng-west",
                                            "links": {
                                                "rel": "/api/v1/platform/auth/groups/eng-west",
                                                "name": "eng-west",
                                                "displayName": "West engineering"
                                            }
                                        }
                                    },
                                    {
                                        "external": "Engineering-US-East",
                                        "caseSensitive": true,
                                        "internal": {
                                            "ref": "/platform/auth/groups/eng-east",
                                            "links": {
                                                "rel": "/api/v1/platform/auth/groups/eng-east",
                                                "name": "eng-east",
                                                "displayName": "East engineering"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "ActiveDirectory": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "ACTIVE_DIRECTORY"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "This field is read only and will only be reflected in currentStatus and ignored in desiredState.",
                        "enum": [
                            "CONNECTED_BOUND",
                            "CONNECTED_BIND_FAILED",
                            "SSL_CA_FAILURE",
                            "CONNECTION_FAILURE",
                            "PENDING"
                        ]
                    },
                    "domain": {
                        "type": "string",
                        "description": "The LDAP domain to authenticate against. The domain is unique per each configured Active Directory authentication provider. This field cannot be updated.\n",
                        "pattern": "^((DC|OU)=[^,=<>]+,)*(DC=[^,,=<>]+)$",
                        "example": "DC=mydomain,DC=example,DC=com"
                    },
                    "defaultLoginDomain": {
                        "type": "string",
                        "description": "The login domain to use when a user authenticates with only a username rather than specifying DOMAIN\\username or username@domain.fqdn.      \n",
                        "example": "mydomain.mycompany.com"
                    },
                    "groupSearchFilter": {
                        "type": "string",
                        "description": "The search filter to use when finding users within a root domain.\n",
                        "example": "(objectClass=group)"
                    },
                    "groupMemberAttribute": {
                        "type": "string",
                        "description": "The LDAP attribute to use for specifying membership in an AD Group.\n",
                        "example": "memberof"
                    },
                    "userFormat": {
                        "type": "string",
                        "enum": [
                            "USER_DOMAIN",
                            "UPN"
                        ],
                        "description": "The username format. \n\n- UPN = username@domain\n- USER_DOMAIN = domain/user\n",
                        "example": "UPN"
                    },
                    "connection": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/AuthConnection"
                        }
                    },
                    "groupMappings": {
                        "type": "array",
                        "description": "Maps AD Group(s) to NGINX Controller Group(s).\n",
                        "items": {
                            "$ref": "#/components/schemas/GroupMapping"
                        }
                    },
                    "bindUser": {
                        "$ref": "#/components/schemas/BindUser"
                    },
                    "pollIntervalSec": {
                        "type": "integer",
                        "description": "Time, in seconds, between refresh of AD information, including the  organization unit list.\n",
                        "minimum": 300,
                        "default": 3600
                    },
                    "groupCacheTimeSec": {
                        "type": "integer",
                        "description": "Time, in seconds, for which the list of organizational units is honored before being considered stale.  \n> This value should be double the configured `pollIntervalSec`.\n",
                        "minimum": 600,
                        "default": 7200
                    },
                    "honorStaleGroups": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls whether a stale AD Group list should be honored when authorizing and authenticating users.\n"
                    },
                    "filteredGroups": {
                        "type": "array",
                        "description": "List of groups in the AD that satifies the `groupSearchFilter` field. This field is read only. \n",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "type"
                ]
            },
            "AzureActiveDirectory": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "AZURE_ACTIVE_DIRECTORY"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "This field is read-only, it is reflected in currentStatus and ignored in desiredState.",
                        "enum": [
                            "CONNECTED_BOUND",
                            "CONNECTION_FAILURE",
                            "PENDING"
                        ]
                    },
                    "groupFilter": {
                        "type": "string",
                        "description": "The filter attribute is used to filter groups in an Azure AD tenant. See [here](https://docs.microsoft.com/en-us/graph/query-parameters#filter-parameter) for more details.\n",
                        "example": "groupTypes/any(c:c+eq+'Unified')"
                    },
                    "oidcConfig": {
                        "$ref": "#/components/schemas/OIDCConfig"
                    },
                    "groupMappings": {
                        "type": "array",
                        "description": "Maps Azure AD Group(s) to NGINX Controller Group(s).\n",
                        "items": {
                            "$ref": "#/components/schemas/GroupMapping"
                        }
                    },
                    "pollIntervalSec": {
                        "type": "integer",
                        "description": "Time (sec) interval for refreshing Azure AD information, including the groups and group membership information.\n",
                        "minimum": 300,
                        "default": 3600
                    },
                    "groupCacheTimeSec": {
                        "type": "integer",
                        "description": "Time (sec) interval for which the group and group membership information are honored before being considered stale.\n> This value should be double the configured `pollIntervalSec`.\n",
                        "minimum": 600,
                        "default": 7200
                    },
                    "honorStaleGroups": {
                        "type": "boolean",
                        "default": false,
                        "description": "Controls whether a stale Azure AD group membership information is honored or not when authorizing and authenticating users.\n"
                    },
                    "filteredGroups": {
                        "type": "array",
                        "description": "List of groups in the Azure AD which satisfy the `groupFilter` field. This field is read-only.\n",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "type"
                ]
            },
            "AuthConnection": {
                "type": "object",
                "description": "Connection parameters for an external authentication provider.\n",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Connection URI. \n",
                        "format": "uri",
                        "pattern": "^ldaps?:\\/\\/([\\w\\-]+\\.)+([\\w\\-]*)(:[0-9]+)?$",
                        "example": "ldap://dc1.example.com"
                    },
                    "sslMode": {
                        "type": "string",
                        "description": "SSL connection parameters.\n- `PLAIN_TEXT`: (Insecure) Unencrypted connection. Does not require SSL certificates.\n- `REQUIRE`: (Default) Require an SSL connection. Unencrypted connections will fail. The server identity is not verified.\n- `VERIFY_CA`: (Most secure) Verify the certificate authority (CA) of the Active Directory connection. The server is verified by checking the certificate chain up to the root certificate stored on the client.\n\n> **Note**: For Production environments, we strongly advise using `VERIFY_CA` for the SSL mode in order to prevent server spoofing.\n",
                        "enum": [
                            "PLAIN_TEXT",
                            "REQUIRE",
                            "VERIFY_CA"
                        ]
                    },
                    "rawCa": {
                        "type": "string",
                        "description": "Raw Certificate",
                        "example": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                    }
                },
                "required": [
                    "uri",
                    "sslMode"
                ]
            },
            "GroupMapping": {
                "type": "object",
                "description": "Authentication provider group to NGINX Controller group mapping.\n",
                "properties": {
                    "caseSensitive": {
                        "type": "boolean",
                        "description": "Controls whether or not you want to match the external name exactly or if the match should be case-insensitive.",
                        "default": false
                    },
                    "external": {
                        "type": "string",
                        "description": "The name of the external group.",
                        "example": "Engineering-US-West"
                    },
                    "internal": {
                        "$ref": "#/components/schemas/ResourceRef"
                    }
                },
                "required": [
                    "external",
                    "internal"
                ]
            },
            "BindUser": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BindUserPassword"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "PASSWORD": "#/components/schemas/BindUserPassword"
                    }
                }
            },
            "BindUserPassword": {
                "type": "object",
                "description": "Credentials used to access data within the AD.\n",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "authentication type.",
                        "enum": [
                            "PASSWORD"
                        ]
                    },
                    "username": {
                        "type": "string",
                        "minLength": 1,
                        "description": "AD bind username."
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "minLength": 1,
                        "description": "AD bind user password."
                    }
                },
                "required": [
                    "type",
                    "username",
                    "password"
                ]
            },
            "OIDCConfig": {
                "type": "object",
                "description": "OpenID Connect config for an external identity provider.\n",
                "properties": {
                    "providerURI": {
                        "type": "string",
                        "description": "Identity provider URL. It contains the tenant ID for Azure Identity provider. \n",
                        "format": "uri",
                        "example": "https://login.microsoftonline.com/d45dfd66-6a3b-40d1-9be0-bf8327d81c56/v2.0"
                    },
                    "clientID": {
                        "type": "string",
                        "description": "The Application (client) ID that the identity provider assigns to the NGINX Controller app. For Azure identity providers, you can find it in the portal App registrations.\n",
                        "example": "781729sd-87b2-4333-9730-338d3a87340b"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "A secret string that the application uses to prove its identity when requesting a token.\n",
                        "example": "Ic767hk_8anvoip76v"
                    },
                    "scopes": {
                        "type": "array",
                        "description": "OpenID Connect Clients use scope values to specify what access privileges are being requested. See [here](https://openid.net/specs/openid-connect-basic-1_0.html#Scopes) for more information.",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "openid",
                            "email",
                            "profile"
                        ]
                    },
                    "redirectURI": {
                        "type": "string",
                        "description": "The redirect URI of NGINX controller, where the identity provider sends authentication responses to. This field is read-only. It is reflected in currentStatus and ignored in desiredState. Set this to be one of the redirect URIs in app registration for NGINX Controller in the identity provider's portal.",
                        "format": "uri",
                        "example": "https://54.212.107.157/api/v1/platform/oidc-handler"
                    }
                },
                "required": [
                    "providerURI",
                    "clientID",
                    "clientSecret"
                ]
            },
            "NamedLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelfLinks"
                    },
                    {
                        "type": "object",
                        "description": "Contains information about the object being referred to.\n\nThese are generally details -- like the object name and display name --\nthat are useful to a consumer of the API that performs further\nprocessing. \n\nThis object is only present in responses.\n  \n",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "production",
                                "description": "The name of the linked resource.\n"
                            },
                            "displayName": {
                                "type": "string",
                                "example": "Production Environment",
                                "description": "A user friendly resource name."
                            }
                        }
                    }
                ]
            },
            "ResourceRef": {
                "type": "object",
                "required": [
                    "ref"
                ],
                "properties": {
                    "ref": {
                        "type": "string",
                        "example": "/services/environments/prod",
                        "description": "A reference to another NGINX Controller resource.\n"
                    },
                    "links": {
                        "$ref": "#/components/schemas/NamedLinks"
                    }
                }
            },
            "GlobalSettings": {
                "type": "object",
                "required": [
                    "metadata"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "type": "object",
                        "properties": {
                            "agentSettings": {
                                "$ref": "#/components/schemas/AgentSettingsData"
                            },
                            "platformSettings": {
                                "$ref": "#/components/schemas/PlatformSettingsData"
                            }
                        }
                    },
                    "currentStatus": {
                        "type": "object",
                        "properties": {
                            "state": {
                                "$ref": "#/components/schemas/ConfigState"
                            },
                            "agentSettings": {
                                "$ref": "#/components/schemas/AgentSettingsData"
                            },
                            "platformVersion": {
                                "$ref": "#/components/schemas/PlatformVersionData"
                            },
                            "platformSettings": {
                                "$ref": "#/components/schemas/PlatformSettingsData"
                            }
                        }
                    }
                }
            },
            "AgentSettingsData": {
                "type": "object",
                "description": "Sets the global settings for NGINX Controller Agent.",
                "properties": {
                    "enableNGINXConfigAnalyzer": {
                        "type": "boolean",
                        "description": "Disable or enable NGINX configuration file analysis.",
                        "default": true
                    },
                    "enablePeriodicNGINX-T": {
                        "type": "boolean",
                        "description": "Disable or enable periodic NGINX configuration syntax checking with \\\"nginx -t\\\".",
                        "default": false
                    },
                    "enableAnalyzeSSLCertificates": {
                        "type": "boolean",
                        "description": "Disable or enable analyzing SSL certs.",
                        "default": true
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "Access token to retrieve Agent installer."
                    }
                }
            },
            "PlatformVersionData": {
                "type": "object",
                "description": "Returns the version information for NGINX Controller and its sub-components.",
                "required": [
                    "version",
                    "buildNumber",
                    "components"
                ],
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "The version number."
                    },
                    "buildNumber": {
                        "type": "string",
                        "description": "Build number of the artifact used for installation."
                    },
                    "components": {
                        "type": "array",
                        "description": "The NGINX Controller sub-components.",
                        "items": {
                            "$ref": "#/components/schemas/componentDef"
                        }
                    }
                },
                "example": {
                    "version": "3.0.0",
                    "buildNumber": "2313201",
                    "components": [
                        {
                            "application": "secrets",
                            "version": "0.9.1"
                        },
                        {
                            "application": "platform-mgr",
                            "version": "0.2.2"
                        }
                    ]
                }
            },
            "componentDef": {
                "type": "object",
                "required": [
                    "application",
                    "version"
                ],
                "properties": {
                    "application": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "example": {
                    "application": "secrets",
                    "version": "0.9.1"
                }
            },
            "PlatformSettingsData": {
                "type": "object",
                "description": "Sets the platform settings for NGINX Controller.",
                "properties": {
                    "apigwCert": {
                        "type": "string",
                        "description": "SSL/TLS certificate (PEM format) for API Gateway.\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`).\n",
                        "example": "-----BEGIN CERTIFICATE-----\\n MIICpzCCAhACCQDkjx7mP9cuRjANBgkqhkiG9w0BAQsFADCBlzELMAkGA1UEBhMC\\n <EXAMPLE_SNIPPED> MiJVGawyxDzBm2UhzNOE0ABHfjAgM6PAYmtMhhQawk6bmttXYhJeqhLSji4LEj5d\\n Z4FmXQ5rWM0RWBs=\\n -----END CERTIFICATE-----"
                    },
                    "apigwKey": {
                        "type": "string",
                        "writeOnly": true,
                        "description": "Private key (PEM format) for API Gateway. Key must match certificate.\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`).\n",
                        "example": "-----BEGIN PRIVATE KEY-----\\n MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALSQBtRafNJtTqN0\\n <EXAMPLE_SNIPPED> nYiZq6TZUsHjfG2R9PlK6jsvno9O6amN96Al6ZSTTDjhr4VU7/RJ0p/cisiCboCX\\n 4cCq6lFKpIpeZJI=\\n -----END PRIVATE KEY-----"
                    },
                    "FQDN": {
                        "type": "string",
                        "description": "Fully qualified domain name for the NGINX Controller server, which users and Controller Agents will use when connecting to NGINX Controller."
                    },
                    "smtpHost": {
                        "type": "string",
                        "description": "SMTP host"
                    },
                    "smtpPort": {
                        "type": "integer",
                        "description": "SMTP port",
                        "minimum": 1,
                        "maximum": 65535
                    },
                    "smtpAuthentication": {
                        "type": "boolean",
                        "description": "Specify if SMTP server requires username and password."
                    },
                    "smtpUseTLS": {
                        "type": "boolean",
                        "description": "Specify if SMTP should use TLS."
                    },
                    "smtpFrom": {
                        "type": "string",
                        "description": "Specify the email to show in the 'FROM' field."
                    },
                    "smtpUser": {
                        "type": "string",
                        "description": "SMTP user (required when smtpAuthentication is enabled)."
                    },
                    "smtpPassword": {
                        "type": "string",
                        "description": "SMTP password (required when smtpAuthentication is enabled)."
                    },
                    "dbType": {
                        "type": "string",
                        "enum": [
                            "external",
                            "embedded"
                        ],
                        "description": "Config database type - embedded or external. Read-only.",
                        "readOnly": true,
                        "example": "embedded"
                    },
                    "dbHost": {
                        "type": "string",
                        "description": "Config database host (read-only if using an embedded Config database)."
                    },
                    "dbPort": {
                        "type": "integer",
                        "description": "Config database port (read-only if using internal Config database).",
                        "minimum": 1,
                        "maximum": 65535
                    },
                    "dbUser": {
                        "type": "string",
                        "description": "Config database username (read-only if using internal Config database)."
                    },
                    "dbPassword": {
                        "type": "string",
                        "description": "Config database password (read-only if using internal Config database)."
                    },
                    "dbUseTLS": {
                        "type": "boolean",
                        "description": "Specify wether the Config database connection uses TLS or not (read-only if using internal Config database)."
                    },
                    "dbCA": {
                        "type": "string",
                        "description": "SSL/TLS Certificate Authority certificate (PEM format) for verifying Config database server certificate. Only required if server certificate is signed by a private CA.\nBecause JSON does not support multi-line strings, you must replace line feed and/or carriage return characters with their literal equivalents as two characters - `\\n`, a backslash and letter `n`.\nRead-only if using internal Config database.\n",
                        "example": "-----BEGIN CERTIFICATE-----\\nMIICpzCCAhACCQDkjx7mP9cuRjANBgkqhkiG9w0BAQsFADCBlzELMAkGA1UEBhMC\\n<EXAMPLE_SNIPPED>Z4FmXQ5rWM0RWBs=\\n-----END CERTIFICATE-----"
                    },
                    "dbClientCert": {
                        "type": "string",
                        "description": "SSL/TLS client certificate (PEM format) for authenticating when connecting to the Config database.\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`).\nRead-only if using internal Config database.\n",
                        "example": "-----BEGIN CERTIFICATE-----\\nMIICpzCCAhACCQDkjx7mP9cuRjANBgkqhkiG9w0BAQsFADCBlzELMAkGA1UEBhMC\\n<EXAMPLE_SNIPPED>Z4FmXQ5rWM0RWBs=\\n-----END CERTIFICATE-----"
                    },
                    "dbClientKey": {
                        "type": "string",
                        "description": "Private key (PEM format) for Config database connection. Key must match certificate.\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`).\nRead-only if using internal Config database.\n",
                        "example": "-----BEGIN PRIVATE KEY-----\\nMIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALSQBtRafNJtTqN0\\n<EXAMPLE_SNIPPED>nYiZq6TZUsHjfG2R9PlK6jsvno9O6amN96Al6ZSTTDjhr4VU7/RJ0p/cisiCboCX\\n4cCq6lFKpIpeZJI=\\n-----END PRIVATE KEY-----"
                    },
                    "tsdbVolumeType": {
                        "type": "string",
                        "description": "Time Series database volume type.",
                        "enum": [
                            "local",
                            "nfs",
                            "aws"
                        ],
                        "readOnly": true
                    },
                    "tsdbNFSHost": {
                        "type": "string",
                        "description": "Time Series database NFS host.",
                        "readOnly": true
                    },
                    "tsdbNFSPath": {
                        "type": "string",
                        "description": "Time Series database NFS path.",
                        "readOnly": true
                    },
                    "tsdbAWSVolumeID": {
                        "type": "string",
                        "description": "Time Series database AWS Volume ID.",
                        "readOnly": true
                    },
                    "clusterFloatingIP": {
                        "type": "string",
                        "pattern": "^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$|^$",
                        "description": "Floating IPv4 address used to communicate with Controller in multinode/cluster mode.\nThis setting is only valid for local (non-cloud) installations. Set empty value to disable floating IP.\n"
                    },
                    "clusterLoadBalancer": {
                        "type": "string",
                        "description": "Hostname or IP of the external cluster load balancer. Read-only.",
                        "readOnly": true
                    }
                }
            },
            "UserDef": {
                "type": "object",
                "required": [
                    "firstName",
                    "lastName",
                    "email",
                    "password"
                ],
                "properties": {
                    "account": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "example": 1,
                        "deprecated": true,
                        "description": "The account number of the tentant."
                    },
                    "id": {
                        "type": "integer",
                        "example": 123,
                        "description": "Account ID"
                    },
                    "firstName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "example": "John",
                        "description": "Given name."
                    },
                    "lastName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "example": "Doe",
                        "description": "Surname."
                    },
                    "lastLogin": {
                        "type": "integer",
                        "example": 1570132969,
                        "description": "Unix time (seconds since Epoch) of last login."
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@nginx.com",
                        "description": "An email address that serves as the account's username. This must match the resource's metadata.name property.",
                        "format": "email"
                    },
                    "authn": {
                        "type": "string",
                        "enum": [
                            "amplify"
                        ]
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "minLength": 8,
                        "maxLength": 64,
                        "description": "Passwords must meet the following requirements:\n\n  - length must be between 8 and 64 characters\n  - must contain at least 1 letter\n  - must contain at least 1 number\n  - must be different from the old password\n\n  Dictionary words, mangled dictionary words, or systematic passwords like '1234567a' are not allowed.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "example": "761ab961448865d86ef71c67fd74432b",
                        "deprecated": true,
                        "description": "User api key."
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the account is enabled.",
                        "default": false
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        }
                    }
                }
            },
            "User": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/UserDef"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/UserDef"
                    }
                }
            },
            "UpdateUser": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/UpdateUserDef"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/UserDef"
                    }
                },
                "example": {
                    "metadata": {
                        "name": "john.doe@nginx.com",
                        "kind": "user",
                        "createTime": "2019-07-29T09:12:33.001Z",
                        "displayName": "Jane Doe",
                        "description": "NGINX Controller user with a production environment role."
                    },
                    "desiredState": {
                        "firstName": "Jane",
                        "lastName": "Doe",
                        "password": "NewPassWd1234",
                        "verifyPassword": "OldPassWd1234",
                        "roles": [
                            {
                                "ref": "/platform/roles/new"
                            }
                        ]
                    },
                    "currentStatus": {
                        "account": "1",
                        "id": 123,
                        "firstName": "Jane",
                        "lastName": "Doe",
                        "lastLogin": 1570132969,
                        "email": "john.doe@nginx.com",
                        "authn": "amplify",
                        "password": "********",
                        "roles": [
                            {
                                "ref": "/platform/roles/prod",
                                "links": {
                                    "rel": "/api/v1/platform/roles/prod",
                                    "name": "prod"
                                }
                            }
                        ]
                    }
                }
            },
            "UpdateUserDef": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "example": "Jane",
                        "description": "Given name."
                    },
                    "lastName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "example": "Doe",
                        "description": "Surname."
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "minLength": 8,
                        "maxLength": 64,
                        "description": "The user's password must meet the following requirements:\n\n  - Length must be between 8 and 64 characters\n  - Must contain at least 1 letter\n  - Must contain at least 1 number\n  - Must be different from the old password\n  - Dictionary words, mangled dictionary words, or systematic passwords like '1234567a' are not allowed\n  \n"
                    },
                    "verifyPassword": {
                        "type": "string",
                        "format": "password",
                        "description": "The user's current password. Users must verify their current password to make updates to their user profiles. The current password does not need to be verified when an admin user updates other users' profiles."
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        }
                    }
                },
                "example": {
                    "firstName": "Jane",
                    "lastName": "Doe",
                    "password": "NewPassWd1234",
                    "verifyPassword": "OldPassWd1234",
                    "roles": [
                        {
                            "ref": "/platform/roles/new"
                        }
                    ]
                }
            },
            "UserListResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "description": "List of User resources."
                    }
                },
                "example": {
                    "items": [
                        {
                            "metadata": {
                                "name": "john.doe@nginx.com",
                                "kind": "user",
                                "createTime": "2019-07-29T09:12:33.001Z",
                                "displayName": "John Doe",
                                "description": "NGINX Controller user with production environment role"
                            },
                            "desiredState": {
                                "firstName": "John",
                                "lastName": "Doe",
                                "email": "john.doe@nginx.com",
                                "password": "********",
                                "roles": [
                                    {
                                        "ref": "/platform/roles/prod"
                                    }
                                ]
                            },
                            "currentStatus": {
                                "account": "1",
                                "id": 123,
                                "firstName": "John",
                                "lastName": "Doe",
                                "lastLogin": 1570132969,
                                "email": "john.doe@nginx.com",
                                "authn": "amplify",
                                "password": "********",
                                "roles": [
                                    {
                                        "ref": "/platform/roles/prod",
                                        "links": {
                                            "rel": "/api/v1/platform/roles/prod",
                                            "name": "prod"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            "GlobalFeatures": {
                "type": "object",
                "required": [
                    "metadata"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "type": "object",
                        "properties": {
                            "featureFlags": {
                                "type": "array",
                                "description": "Flags to describe or extend NGINX Controller behavior (optional).",
                                "items": {
                                    "$ref": "#/components/schemas/FeatureFlagsDef"
                                }
                            }
                        }
                    },
                    "currentStatus": {
                        "type": "object",
                        "properties": {
                            "state": {
                                "$ref": "#/components/schemas/ConfigState"
                            },
                            "featureFlags": {
                                "type": "array",
                                "description": "Flags to describe or extend NGINX Controller behavior (optional).",
                                "items": {
                                    "$ref": "#/components/schemas/FeatureFlagsDef"
                                }
                            }
                        }
                    }
                }
            },
            "FeatureFlagsDef": {
                "type": "object",
                "required": [
                    "name",
                    "value"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "reserved",
                    "value": "true"
                }
            },
            "ResetPasswordRequest": {
                "type": "object",
                "required": [
                    "metadata"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    }
                }
            },
            "ResetPassword": {
                "type": "object",
                "required": [
                    "desiredState",
                    "metadata"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "type": "object",
                        "required": [
                            "password"
                        ],
                        "properties": {
                            "password": {
                                "type": "string",
                                "format": "password",
                                "example": "TestImpl45!",
                                "minLength": 8,
                                "maxLength": 64,
                                "description": "The user's password must meet the following requirements:\n  - Length must be between 8 and 64 characters\n  - Must contain at least 1 letter\n  - Must contain at least 1 number\n  - Must be different from the old password\n  - Dictionary words, mangled dictionary words, or systematic passwords like '1234567a' are not allowed.\n"
                            }
                        }
                    }
                }
            },
            "LicenseRequest": {
                "type": "object",
                "required": [
                    "content"
                ],
                "properties": {
                    "content": {
                        "type": "string",
                        "format": "password",
                        "description": "License file contents, encoded as Base64"
                    }
                }
            },
            "PutLicenseRequest": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "type": "object",
                        "required": [
                            "content"
                        ],
                        "properties": {
                            "content": {
                                "type": "string",
                                "format": "password",
                                "description": "The customer association token or NGINX Controller license, which can be downloaded from your [MyF5](account.f5.com/myf5) account. The license must be formatted as a base64-encoded string, while the association token is unencoded."
                            }
                        }
                    }
                }
            },
            "License": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState",
                    "currentStatus"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "type": "object",
                        "properties": {
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LicenseData"
                                }
                            }
                        }
                    },
                    "currentStatus": {
                        "type": "object",
                        "properties": {
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LicenseData"
                                }
                            }
                        }
                    }
                }
            },
            "LicenseResponse": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState",
                    "currentStatus"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "string",
                                "format": "password",
                                "description": "Redacted license information."
                            },
                            "items": {
                                "type": "array",
                                "deprecated": true,
                                "items": {
                                    "$ref": "#/components/schemas/LicenseData"
                                }
                            }
                        }
                    },
                    "currentStatus": {
                        "type": "object",
                        "properties": {
                            "subscription": {
                                "$ref": "#/components/schemas/Subscription"
                            },
                            "entitlement": {
                                "$ref": "#/components/schemas/Entitlement"
                            },
                            "state": {
                                "type": "object",
                                "required": [
                                    "currentInstance"
                                ],
                                "properties": {
                                    "currentInstance": {
                                        "$ref": "#/components/schemas/CurrentInstance"
                                    }
                                }
                            },
                            "items": {
                                "type": "array",
                                "deprecated": true,
                                "items": {
                                    "$ref": "#/components/schemas/LicenseData"
                                }
                            }
                        }
                    }
                }
            },
            "LicenseData": {
                "type": "object",
                "required": [
                    "product",
                    "expiry",
                    "instanceCount",
                    "serial",
                    "version",
                    "type",
                    "id"
                ],
                "description": "Defines the features of a given license",
                "properties": {
                    "product": {
                        "type": "string",
                        "description": "The name of the product the license enables.",
                        "example": "NGINX Controller Monitoring"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date on which the license expires. Represented in Coordinated Universal Time (UTC), specifically using the ISO 8601 standard.",
                        "example": "1996-02-26T00:00:00.000Z"
                    },
                    "instanceCount": {
                        "type": "integer",
                        "description": "The number of instances that are allowed by the license.",
                        "example": 20
                    },
                    "serial": {
                        "type": "integer",
                        "description": "A unique identifier for the license.",
                        "example": 20145
                    },
                    "version": {
                        "type": "integer",
                        "description": "The product version number.",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "The license type. Lowercase values are deprecated.",
                        "enum": [
                            "production",
                            "beta",
                            "internal",
                            "partner",
                            "trial",
                            "PRODUCTION",
                            "BETA",
                            "INTERNAL",
                            "PARTNER",
                            "TRIAL",
                            "PAID",
                            "EVAL"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for a product.",
                        "enum": [
                            "UNKNOWN",
                            "ADC",
                            "APIM",
                            "ANALYTICS"
                        ]
                    }
                }
            },
            "Subscription": {
                "type": "object",
                "required": [
                    "id"
                ],
                "description": "Defines the features of a subscription.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "b6d7c577-b708-44ad-839c-9743f85fcf7c",
                        "description": "Subscription ID."
                    }
                }
            },
            "Entitlement": {
                "type": "object",
                "required": [
                    "features"
                ],
                "description": "Defines the elements of an entitlement.",
                "properties": {
                    "features": {
                        "type": "array",
                        "description": "Product features.",
                        "items": {
                            "$ref": "#/components/schemas/Feature"
                        }
                    }
                }
            },
            "Feature": {
                "type": "object",
                "required": [
                    "name",
                    "unitOfMeasure",
                    "id",
                    "type"
                ],
                "description": "Defines a product feature, consumption metric, and metric usage limit.",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the feature.",
                        "example": "NGINX Controller Load Balancing"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum limit for the consumption metric.",
                        "example": 1,
                        "minimum": 0
                    },
                    "unlimited": {
                        "type": "boolean",
                        "description": "Indicates whether there is a limit for the consumption metric or not.",
                        "example": true
                    },
                    "unitOfMeasure": {
                        "$ref": "#/components/schemas/UnitOfMeasure"
                    },
                    "type": {
                        "type": "string",
                        "description": "The license type.",
                        "example": "PAID",
                        "enum": [
                            "PRODUCTION",
                            "BETA",
                            "INTERNAL",
                            "PARTNER",
                            "TRIAL",
                            "PAID",
                            "EVAL"
                        ]
                    },
                    "id": {
                        "$ref": "#/components/schemas/FeatureID"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date on which the license expires. Represented in Coordinated Universal Time (UTC), specifically using the ISO 8601 standard.",
                        "example": "1996-02-26T00:00:00.000Z"
                    },
                    "gracePeriodDays": {
                        "type": "integer",
                        "description": "Number of grace period days after the license expires.",
                        "example": 30,
                        "minimum": 0
                    }
                }
            },
            "CurrentInstance": {
                "type": "object",
                "required": [
                    "type",
                    "version",
                    "status",
                    "features",
                    "configState"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                        "description": "Unique identifier for the current instance."
                    },
                    "telemetryLastReported": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time when telemetry data was last reported from the current instance. Represented in Coordinated Universal Time (UTC), specifically using the ISO 8601 standard.",
                        "example": "1996-02-26T00:00:00.000Z"
                    },
                    "type": {
                        "type": "string",
                        "example": "NGINX Controller",
                        "description": "Product type."
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the current instance with respect to the license.\n\n- `NONE`: The current instance is not yet licensed.\n- `INVALID`: The current instance has at least one entitlement in non-functional license status.\n- `ENFORCED`: The current instance has at least one entitlement in enforced license status and no entitlements in non-functional status.\n- `GRACE`: The current instance has at least one entitlement in grace period license status and no entitlements in enforced or non-functional status.\n- `VALID`: The current instance has valid entitlement(s) that have no adverse license statuses.\n- `CORRUPTED`: The license for the current instance is corrupted. Upload the license file again to rectify the status.\n",
                        "enum": [
                            "NONE",
                            "INVALID",
                            "ENFORCED",
                            "GRACE",
                            "VALID",
                            "CORRUPTED"
                        ]
                    },
                    "version": {
                        "type": "string",
                        "example": "3.3.0",
                        "description": "Product version."
                    },
                    "configState": {
                        "$ref": "#/components/schemas/ConfigState"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeatureStatus"
                        },
                        "description": "List of the available features and their current usage."
                    }
                }
            },
            "FeatureStatus": {
                "type": "object",
                "required": [
                    "name",
                    "unitOfMeasure",
                    "id"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the product feature.",
                        "example": "NGINX Controller Load Balancing"
                    },
                    "used": {
                        "type": "number",
                        "description": "Amount of the feature used by the current NGINX Controller instance.",
                        "example": 1,
                        "minimum": 0
                    },
                    "aggregateUsed": {
                        "type": "number",
                        "description": "Amount of the feature used by all NGINX Controller instances in the bucket.",
                        "example": 1,
                        "minimum": 0
                    },
                    "remaining": {
                        "type": "number",
                        "description": "Amount of the feature remaining.",
                        "example": 1,
                        "minimum": 0
                    },
                    "unitOfMeasure": {
                        "$ref": "#/components/schemas/UnitOfMeasure"
                    },
                    "id": {
                        "$ref": "#/components/schemas/FeatureID"
                    },
                    "daysUntilExpiry": {
                        "type": "integer",
                        "description": "Defines when the current entitlement expires.",
                        "example": 20,
                        "minimum": 0
                    },
                    "gracePeriodRemainingDays": {
                        "type": "integer",
                        "description": "Defines the remaining grace period days after the license expires.",
                        "minimum": 0
                    }
                }
            },
            "UnitOfMeasure": {
                "type": "string",
                "enum": [
                    "INSTANCES",
                    "WORKLOADS",
                    "DATA_PER_HOUR_IN_GB",
                    "SUCCESSFUL_API_CALLS_IN_MILLIONS",
                    "SUCCESSFUL_API_CALLS"
                ],
                "description": "Unit of measure used for computing consumption.",
                "example": "WORKLOADS"
            },
            "FeatureID": {
                "type": "string",
                "enum": [
                    "UNKNOWN",
                    "ADC",
                    "APIM",
                    "ANALYTICS"
                ],
                "example": "ADC",
                "description": "Unique identifier for a product feature."
            },
            "LicenseName": {
                "type": "string",
                "description": "Name of the License resource.",
                "example": "controller-provided"
            },
            "NginxPlusLicensesList": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NginxPlusLicenseResponse"
                        }
                    }
                }
            },
            "NginxPlusLicenseResponse": {
                "type": "object",
                "required": [
                    "metadata",
                    "currentStatus",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/NginxPlusKeys"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/NginxPlusKeys"
                    }
                },
                "example": {
                    "metadata": {
                        "name": "controller-provided",
                        "ref": "/platform/licenses/nginx-plus-licenses/controller-provided",
                        "kind": "license"
                    },
                    "currenStatus": {
                        "certKey": "a valid certificate key for NGINX Plus",
                        "privateKey": "a valid private key for NGINX Plus"
                    },
                    "desiredState": {
                        "certKey": "a valid certificate key for NGINX Plus",
                        "privateKey": "a valid private key for NGINX Plus"
                    }
                }
            },
            "NginxPlusKeys": {
                "type": "object",
                "required": [
                    "certKey",
                    "privateKey"
                ],
                "properties": {
                    "certKey": {
                        "type": "string",
                        "description": "Contents of the certificate file that is required to install NGINX Plus.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Contents of the key file that is required to install NGINX Plus.\n"
                    }
                }
            },
            "Login": {
                "type": "object",
                "properties": {
                    "credentials": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BasicAuth"
                            },
                            {
                                "$ref": "#/components/schemas/ActiveDirectoryAuth"
                            },
                            {
                                "$ref": "#/components/schemas/AzureActiveDirectoryAuth"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "BASIC": "#/components/schemas/BasicAuth",
                                "ACTIVE_DIRECTORY": "#/components/schemas/ActiveDirectoryAuth",
                                "AZURE_ACTIVE_DIRECTORY": "#/components/schemas/AzureActiveDirectoryAuth"
                            }
                        },
                        "example": {
                            "type": "BASIC",
                            "username": "guest@nginx.com",
                            "password": "Guest#12E"
                        }
                    }
                }
            },
            "AzureActiveDirectoryAuth": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "AZURE_ACTIVE_DIRECTORY"
                        ]
                    },
                    "providerName": {
                        "type": "string",
                        "description": "The Azure active directory provider name configured within NGINX Controller.\n"
                    }
                },
                "required": [
                    "type",
                    "providerName"
                ]
            },
            "ActiveDirectoryAuth": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "ACTIVE_DIRECTORY"
                        ]
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for the NGINX Controller User account.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the NGINX Controller User account.\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "The active directory provider name configured within NGINX Controller.\n"
                    }
                },
                "required": [
                    "type",
                    "username",
                    "password",
                    "providerName"
                ]
            },
            "BasicAuth": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "BASIC"
                        ]
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for the NGINX Controller User account.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the NGINX Controller User account.\n"
                    }
                },
                "required": [
                    "type",
                    "username",
                    "password"
                ]
            },
            "ListReadyProviders": {
                "type": "object",
                "required": [
                    "items"
                ],
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SimpleAuthProvider"
                        }
                    }
                }
            },
            "SimpleAuthProvider": {
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "BASIC",
                            "ACTIVE_DIRECTORY",
                            "AZURE_ACTIVE_DIRECTORY"
                        ]
                    }
                }
            },
            "Integration": {
                "type": "object",
                "description": "The Integration resource defines the account credentials and endpoint needed for NGINX Controller to connect to external services.\n",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/IntegrationState"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/IntegrationState"
                    }
                }
            },
            "GetIntegrationResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Integration"
                    }
                ]
            },
            "ListIntegrationResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Integration"
                        }
                    }
                }
            },
            "UpdateIntegration": {
                "type": "object",
                "required": [
                    "metadata"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/UpdateIntegrationState"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/UpdateIntegrationState"
                    }
                }
            },
            "UpdateIntegrationState": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AWSIntegrationForUpdate"
                    },
                    {
                        "$ref": "#/components/schemas/AzureIntegrationForUpdate"
                    },
                    {
                        "$ref": "#/components/schemas/GenericIntegrationForUpdate"
                    },
                    {
                        "$ref": "#/components/schemas/VSphereIntegrationForUpdate"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "AWS_INTEGRATION": "#/components/schemas/AWSIntegrationForUpdate",
                        "AZURE_INTEGRATION": "#/components/schemas/AzureIntegrationForUpdate",
                        "GENERIC_INTEGRATION": "#/components/schemas/GenericIntegrationForUpdate",
                        "VSPHERE_INTEGRATION": "#/components/schemas/VSphereIntegrationForUpdate"
                    }
                }
            },
            "AWSIntegrationForUpdate": {
                "description": "The AWS integration stores the AWS access key for programmatic access to the AWS cloud API.\n",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The AWS_INTEGRATION is an integration for connecting to Amazon Web Services (AWS).",
                        "enum": [
                            "AWS_INTEGRATION"
                        ]
                    },
                    "endpointUri": {
                        "type": "string",
                        "description": "The URI of the AWS cloud service endpoint."
                    },
                    "credential": {
                        "description": "Account credentials for AWS cloud API.\n",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AWSAccessKeyCredential"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "AWS_ACCESS_KEY": "#/components/schemas/AWSAccessKeyCredential"
                            }
                        }
                    }
                }
            },
            "AzureIntegrationForUpdate": {
                "description": "The Azure integration stores the Azure credentials for programmatic access to the Azure cloud API.\n",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The AZURE_INTEGRATION is an integration for connecting to Microsoft Azure.",
                        "enum": [
                            "AZURE_INTEGRATION"
                        ]
                    },
                    "credential": {
                        "description": "Account credentials for Azure cloud API.\n",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AzureServicePrincipal"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "AZURE_SERVICE_PRINCIPAL": "#/components/schemas/AzureServicePrincipal"
                            }
                        }
                    }
                }
            },
            "VSphereIntegrationForUpdate": {
                "type": "object",
                "description": "The VSphere integration stores the credentials for programmatic access to the VSphere cloud API.\n",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The VSPHERE_INTEGRATION is an Integration for connecting to the VSphere datacenter.\n",
                        "enum": [
                            "VSPHERE_INTEGRATION"
                        ]
                    },
                    "hostname": {
                        "type": "string",
                        "description": "VSphere instance hostname ( FQDN or IP ), Connection to it from the controller is through https, the VSphere server certificate is not verified."
                    },
                    "rawCa": {
                        "type": "string",
                        "description": "Raw CA Certificate used to verify the vSphere server certificate",
                        "example": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                    },
                    "credential": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserPassCredential"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "USER_PASS": "#/components/schemas/UserPassCredential"
                            }
                        }
                    }
                }
            },
            "GenericIntegrationForUpdate": {
                "required": [
                    "type"
                ],
                "type": "object",
                "description": "A Generic integration stores the credentials and URI endpoint to connect to external services\nthat require a username and password or an API token for authentication, or accept an unauthenticated connection.\n",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The GENERIC_INTEGRATION is an integration for connecting to external services that require a\nusername and password or an API key, or accept an unauthenticated connection.\n",
                        "enum": [
                            "GENERIC_INTEGRATION"
                        ]
                    },
                    "endpointUri": {
                        "type": "string",
                        "description": "The URI of the service endpoint."
                    },
                    "credential": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserPassCredential"
                            },
                            {
                                "$ref": "#/components/schemas/ApiKeyCredential"
                            },
                            {
                                "$ref": "#/components/schemas/Unauthenticated"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "USER_PASS": "#/components/schemas/UserPassCredential",
                                "API_KEY": "#/components/schemas/ApiKeyCredential",
                                "UNAUTHENTICATED": "#/components/schemas/Unauthenticated"
                            }
                        }
                    }
                }
            },
            "IntegrationState": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AWSIntegration"
                    },
                    {
                        "$ref": "#/components/schemas/AzureIntegration"
                    },
                    {
                        "$ref": "#/components/schemas/GenericIntegration"
                    },
                    {
                        "$ref": "#/components/schemas/VSphereIntegration"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "AWS_INTEGRATION": "#/components/schemas/AWSIntegration",
                        "AZURE_INTEGRATION": "#/components/schemas/AzureIntegration",
                        "GENERIC_INTEGRATION": "#/components/schemas/GenericIntegration",
                        "VSPHERE_INTEGRATION": "#/components/schemas/VSphereIntegration"
                    }
                }
            },
            "AzureIntegration": {
                "description": "The Azure integration stores the Azure credentials for programmatic access to the Azure cloud API.\n",
                "required": [
                    "type",
                    "credential"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The AZURE_INTEGRATION is an integration for connecting to Microsoft Azure.",
                        "enum": [
                            "AZURE_INTEGRATION"
                        ]
                    },
                    "credential": {
                        "description": "Account credentials for Azure cloud API.\n",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AzureServicePrincipal"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "AZURE_SERVICE_PRINCIPAL": "#/components/schemas/AzureServicePrincipal"
                            }
                        }
                    }
                }
            },
            "AWSIntegration": {
                "description": "The AWS integration stores the AWS access key for programmatic access to the AWS cloud API.\n",
                "required": [
                    "type",
                    "credential"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The AWS_INTEGRATION is an integration for connecting to Amazon Web Services (AWS).",
                        "enum": [
                            "AWS_INTEGRATION"
                        ]
                    },
                    "endpointUri": {
                        "type": "string",
                        "description": "The URI of the AWS cloud service endpoint."
                    },
                    "credential": {
                        "description": "Account credentials for AWS cloud API.\n",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AWSAccessKeyCredential"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "AWS_ACCESS_KEY": "#/components/schemas/AWSAccessKeyCredential"
                            }
                        }
                    }
                }
            },
            "AWSAccessKeyCredential": {
                "required": [
                    "type",
                    "accessKeyID",
                    "secretAccessKey"
                ],
                "type": "object",
                "description": "AWS access key credentials: access key ID and secret access key.\n",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "AWS_ACCESS_KEY credentials are used to access the AWS API programmatically.\n",
                        "enum": [
                            "AWS_ACCESS_KEY"
                        ]
                    },
                    "accessKeyID": {
                        "type": "string",
                        "description": "The access key ID of the AWS access key credential."
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The secret access key of the AWS access key credential."
                    }
                }
            },
            "AzureServicePrincipal": {
                "required": [
                    "type",
                    "clientID",
                    "clientSecret",
                    "tenantID"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "",
                        "enum": [
                            "AZURE_SERVICE_PRINCIPAL"
                        ]
                    },
                    "clientID": {
                        "type": "string",
                        "description": "The Client ID of the service principal."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The secret associated with the service principal."
                    },
                    "tenantID": {
                        "type": "string",
                        "description": "The ID for the Active Directory tenant to which the service principal belongs."
                    }
                }
            },
            "VSphereIntegration": {
                "type": "object",
                "description": "The VSphere integration stores the credentials for programmatic access to the VSphere cloud API.\n",
                "required": [
                    "type",
                    "hostname",
                    "credential"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The VSPHERE_INTEGRATION is an Integration for connecting to the VSphere cloud.\n",
                        "enum": [
                            "VSPHERE_INTEGRATION"
                        ]
                    },
                    "hostname": {
                        "type": "string",
                        "description": "VSphere instance hostname ( FQDN or IP ), Connection to it from the controller is through https, the VSphere server certificate is not verified."
                    },
                    "rawCa": {
                        "type": "string",
                        "description": "Raw CA Certificate used to verify the vSphere server certificate",
                        "example": "-----BEGIN CERTIFICATE-----\n MIIDMTCCasdfAwIBAgIUWw25xyNvQPxtjGUZopz0KeoaaQkwDQYJKoZIhvcNAQEL\n [SNIP]\n 2CPqdhpmQhAbzx9ElT8KyC7/08IdV0JK/kSWjfE4jOPOJyI2q0DWExKLuYe+rO+Q\n rg7hesA=\n -----END CERTIFICATE-----"
                    },
                    "credential": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserPassCredential"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "USER_PASS": "#/components/schemas/UserPassCredential"
                            }
                        }
                    }
                }
            },
            "GenericIntegration": {
                "required": [
                    "type",
                    "endpointUri",
                    "credential"
                ],
                "type": "object",
                "description": "A Generic integration resource stores the credentials and URI endpoint to connect to external services\nthat require a username and password or API token for authentication, or accept unauthenticated connection.\n",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The GENERIC_INTEGRATION is an Integration for connecting to external services that require a\nusername and password or an API key, or accept an unauthenticated connection.\n",
                        "enum": [
                            "GENERIC_INTEGRATION"
                        ]
                    },
                    "endpointUri": {
                        "type": "string",
                        "description": "The URI of the service endpoint."
                    },
                    "credential": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserPassCredential"
                            },
                            {
                                "$ref": "#/components/schemas/ApiKeyCredential"
                            },
                            {
                                "$ref": "#/components/schemas/Unauthenticated"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "USER_PASS": "#/components/schemas/UserPassCredential",
                                "API_KEY": "#/components/schemas/ApiKeyCredential",
                                "UNAUTHENTICATED": "#/components/schemas/Unauthenticated"
                            }
                        }
                    }
                }
            },
            "UserPassCredential": {
                "description": "A credential consisting of a username and password. In the case of splunk HEC, username can be any string.",
                "required": [
                    "type",
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "USER_PASS credentials are used to connect to web services that accept a username and password for authentication.\n",
                        "enum": [
                            "USER_PASS"
                        ]
                    },
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "ApiKeyCredential": {
                "description": "For API key based authentication.",
                "required": [
                    "type",
                    "apiKey"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "API_KEY credentials are used to connect to web services that accept an API key for authentication.\n",
                        "enum": [
                            "API_KEY"
                        ]
                    },
                    "apiKey": {
                        "type": "string"
                    }
                }
            },
            "Unauthenticated": {
                "description": "For unauthenticated connections.",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Unauthenticated can be used for services that do not need authentication.\n",
                        "enum": [
                            "UNAUTHENTICATED"
                        ]
                    }
                }
            },
            "GroupListResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "description": "Contains list of authentication groups.\n"
                    }
                }
            },
            "Group": {
                "type": "object",
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/GroupDef"
                    },
                    "currentStatus": {
                        "$ref": "#/components/schemas/GroupDef"
                    }
                }
            },
            "GroupDef": {
                "type": "object",
                "required": [
                    "roles"
                ],
                "description": "An authentication group (or \"AuthN Group\") is a collection of Roles. All AuthN Groups are globally unique. You can assign AuthN Groups to external authentication provider properties (such as an AD Group).\n",
                "properties": {
                    "roles": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        }
                    }
                }
            }
        },
        "examples": {
            "AWSRequest": {
                "value": {
                    "metadata": {
                        "name": "my-aws-integration",
                        "description": "AWS integration for us-west-1",
                        "displayName": "UsWest1-Integration",
                        "tags": [
                            "us-west-1"
                        ]
                    },
                    "desiredState": {
                        "type": "AWS_INTEGRATION",
                        "endpointUri": "https://ec2.us-west-1.amazonaws.com",
                        "credential": {
                            "type": "AWS_ACCESS_KEY",
                            "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                            "secretAccessKey": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY)"
                        }
                    }
                }
            },
            "AWSResponse": {
                "value": {
                    "metadata": {
                        "name": "my-aws-integration",
                        "description": "AWS integration for us-west-1",
                        "displayName": "UsWest1-Integration",
                        "tags": [
                            "us-west-1"
                        ],
                        "uid": "619887de-a748-4931-853d-c6b706f95ddf",
                        "createTime": "2019-09-18T16:42:15.1183523Z",
                        "updateTime": "2019-09-18T16:42:15.1183523Z"
                    },
                    "desiredState": {
                        "type": "AWS_INTEGRATION",
                        "endpointUri": "https://ec2.us-west-1.amazonaws.com",
                        "credential": {
                            "type": "AWS_ACCESS_KEY",
                            "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                            "secretAccessKey": "*********"
                        }
                    },
                    "currentStatus": {
                        "type": "AWS_INTEGRATION",
                        "endpointUri": "https://ec2.us-west-1.amazonaws.com",
                        "credential": {
                            "type": "AWS_ACCESS_KEY",
                            "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                            "secretAccessKey": "*********"
                        }
                    }
                }
            },
            "SplunkRequest": {
                "value": {
                    "metadata": {
                        "name": "my-splunk-integration",
                        "description": "Splunk integration",
                        "displayName": "splunk-Integration",
                        "tags": [
                            "dev"
                        ]
                    },
                    "desiredState": {
                        "type": "GENERIC_INTEGRATION",
                        "endpointUri": "https://splunk.com:8080/services/collector",
                        "credential": {
                            "type": "USER_PASS",
                            "user": "x",
                            "password": "CF179AE4-3C99-45F5-A7CC-3284AA91CF67"
                        }
                    }
                }
            },
            "SplunkResponse": {
                "value": {
                    "metadata": {
                        "name": "my-splunk-integration",
                        "description": "Splunk integration",
                        "displayName": "splunk-Integration",
                        "tags": [
                            "dev"
                        ],
                        "uid": "619887de-a748-4931-853d-c6b706f95ddf",
                        "createTime": "2019-09-18T16:42:15.1183523Z",
                        "updateTime": "2019-09-18T16:42:15.1183523Z"
                    },
                    "desiredState": {
                        "type": "GENERIC_INTEGRATION",
                        "endpointUri": "https://splunk.com:8080/services/collector",
                        "credential": {
                            "type": "USER_PASS",
                            "user": "x",
                            "password": "*********"
                        }
                    },
                    "currentStatus": {
                        "type": "GENERIC_INTEGRATION",
                        "endpointUri": "https://splunk.com:8080/services/collector",
                        "credential": {
                            "type": "USER_PASS",
                            "user": "x",
                            "password": "*********"
                        }
                    }
                }
            },
            "AWSRequestForPatch": {
                "value": {
                    "metadata": {
                        "name": "my-aws-integration",
                        "description": "AWS integration for us-west-1",
                        "displayName": "UsWest1-Integration",
                        "tags": [
                            "us-west-1"
                        ]
                    },
                    "desiredState": {
                        "type": "AWS_INTEGRATION",
                        "credential": {
                            "type": "AWS_ACCESS_KEY",
                            "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                            "secretAccessKey": "*********"
                        }
                    }
                }
            },
            "AWSResponseForPatch": {
                "value": {
                    "metadata": {
                        "name": "my-aws-integration",
                        "description": "AWS integration for us-west-1",
                        "displayName": "UsWest1-Integration",
                        "tags": [
                            "us-west-1"
                        ],
                        "uid": "619887de-a748-4931-853d-c6b706f95ddf",
                        "createTime": "2019-09-18T16:42:15.1183523Z",
                        "updateTime": "2019-09-18T16:42:15.1183523Z"
                    },
                    "desiredState": {
                        "type": "AWS_INTEGRATION",
                        "endpointUri": "https://ec2.us-west-1.amazonaws.com",
                        "credential": {
                            "type": "AWS_ACCESS_KEY",
                            "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                            "secretAccessKey": "*********"
                        }
                    },
                    "currentStatus": {
                        "type": "AWS_INTEGRATION",
                        "endpointUri": "https://ec2.us-west-1.amazonaws.com",
                        "credential": {
                            "type": "AWS_ACCESS_KEY",
                            "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                            "secretAccessKey": "*********"
                        }
                    }
                }
            },
            "SplunkRequestForPatch": {
                "value": {
                    "metadata": {
                        "name": "my-splunk-integration",
                        "description": "Splunk integration",
                        "displayName": "splunk-Integration",
                        "tags": [
                            "dev"
                        ]
                    },
                    "desiredState": {
                        "type": "GENERIC_INTEGRATION",
                        "credential": {
                            "type": "USER_PASS",
                            "user": "x",
                            "password": "CF179AE4-3C99-45F5-A7CC-3284AA91CF67"
                        }
                    }
                }
            },
            "SplunkResponseForPatch": {
                "value": {
                    "metadata": {
                        "name": "my-splunk-integration",
                        "description": "Splunk integration",
                        "displayName": "splunk-Integration",
                        "tags": [
                            "dev"
                        ],
                        "uid": "619887de-a748-4931-853d-c6b706f95ddf",
                        "createTime": "2019-09-18T16:42:15.1183523Z",
                        "updateTime": "2019-09-18T16:42:15.1183523Z"
                    },
                    "desiredState": {
                        "type": "GENERIC_INTEGRATION",
                        "endpointUri": "https://splunk.com:8080/services/collector",
                        "credential": {
                            "type": "USER_PASS",
                            "user": "x",
                            "password": "*********"
                        }
                    },
                    "currentStatus": {
                        "type": "GENERIC_INTEGRATION",
                        "endpointUri": "https://splunk.com:8080/services/collector",
                        "credential": {
                            "type": "USER_PASS",
                            "user": "x",
                            "password": "*********"
                        }
                    }
                }
            },
            "ListIntegrationResponse": {
                "value": {
                    "items": [
                        {
                            "metadata": {
                                "name": "my-aws-integration",
                                "description": "AWS integration for us-west-1",
                                "displayName": "UsWest1-Integration",
                                "tags": [
                                    "us-west-1"
                                ],
                                "uid": "619887de-a748-4931-853d-c6b706f95ddf",
                                "createTime": "2019-09-18T16:42:15.1183523Z",
                                "updateTime": "2019-09-18T16:42:15.1183523Z"
                            },
                            "desiredState": {
                                "type": "AWS_INTEGRATION",
                                "endpointUri": "https://ec2.us-west-1.amazonaws.com",
                                "credential": {
                                    "type": "AWS_ACCESS_KEY",
                                    "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                                    "secretAccessKey": "*********"
                                }
                            },
                            "currentStatus": {
                                "type": "AWS_INTEGRATION",
                                "endpointUri": "https://ec2.us-west-1.amazonaws.com",
                                "credential": {
                                    "type": "AWS_ACCESS_KEY",
                                    "accessKeyID": "AKIAJ3N2PZUMZE3Y67ZA",
                                    "secretAccessKey": "*********"
                                }
                            }
                        },
                        {
                            "metadata": {
                                "name": "my-splunk-integration",
                                "description": "Splunk integration",
                                "displayName": "splunk-Integration",
                                "tags": [
                                    "dev"
                                ],
                                "uid": "619887de-a748-4931-853d-c6b706f95ddf",
                                "createTime": "2019-09-18T16:42:15.1183523Z",
                                "updateTime": "2019-09-18T16:42:15.1183523Z"
                            },
                            "desiredState": {
                                "type": "GENERIC_INTEGRATION",
                                "endpointUri": "https://splunk.com:8080/services/collector",
                                "credential": {
                                    "type": "USER_PASS",
                                    "user": "x",
                                    "password": "*****"
                                }
                            },
                            "currentStatus": {
                                "type": "GENERIC_INTEGRATION",
                                "endpointUri": "https://splunk.com:8080/services/collector",
                                "credential": {
                                    "type": "USER_PASS",
                                    "user": "x",
                                    "password": "*****"
                                }
                            }
                        }
                    ]
                }
            },
            "NotFoundError": {
                "value": {
                    "code": 120003,
                    "message": "Error getting the Integration resource: the specified integration does not exist. Check the name of the Integration resource, then try again."
                }
            },
            "BadRequestError": {
                "value": {
                    "code": 120004,
                    "message": "Error creating the Integration resource: could not parse the request payload. Check the format of the request, then try again."
                }
            },
            "AlreadyExistsError": {
                "value": {
                    "code": 120007,
                    "message": "Error creating the Integration resource: the integration already exists. Use a unique name for the Integration resource, then try again."
                }
            }
        }
    }
}
